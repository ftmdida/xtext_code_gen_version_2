/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslSampleGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class HttpShieldModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HttpShieldModel");
		private final Assignment cAgentsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cAgentsAgentParserRuleCall_0 = (RuleCall)cAgentsAssignment.eContents().get(0);
		
		//HttpShieldModel:
		//	agents+=Agent*;
		@Override public ParserRule getRule() { return rule; }

		//agents+=Agent*
		public Assignment getAgentsAssignment() { return cAgentsAssignment; }

		//Agent
		public RuleCall getAgentsAgentParserRuleCall_0() { return cAgentsAgentParserRuleCall_0; }
	}

	public class AgentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Agent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUserParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttackerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDefenderParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Agent:
		//	User | Attacker | Defender;
		@Override public ParserRule getRule() { return rule; }

		//User | Attacker | Defender
		public Alternatives getAlternatives() { return cAlternatives; }

		//User
		public RuleCall getUserParserRuleCall_0() { return cUserParserRuleCall_0; }

		//Attacker
		public RuleCall getAttackerParserRuleCall_1() { return cAttackerParserRuleCall_1; }

		//Defender
		public RuleCall getDefenderParserRuleCall_2() { return cDefenderParserRuleCall_2; }
	}

	public class UserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "User");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeUserKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cBelongToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFilenameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFilenameSTRINGTerminalRuleCall_4_0 = (RuleCall)cFilenameAssignment_4.eContents().get(0);
		private final Keyword cSourceKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSourceAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSourceIPAddressParserRuleCall_6_0 = (RuleCall)cSourceAssignment_6.eContents().get(0);
		private final Assignment cRequestsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRequestsNormalRequestParserRuleCall_7_0 = (RuleCall)cRequestsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//User:
		//	type="User" name=ID "{" "belongTo" filename=STRING "source: " source=IPAddress requests+=NormalRequest* "}";
		@Override public ParserRule getRule() { return rule; }

		//type="User" name=ID "{" "belongTo" filename=STRING "source: " source=IPAddress requests+=NormalRequest* "}"
		public Group getGroup() { return cGroup; }

		//type="User"
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//"User"
		public Keyword getTypeUserKeyword_0_0() { return cTypeUserKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"belongTo"
		public Keyword getBelongToKeyword_3() { return cBelongToKeyword_3; }

		//filename=STRING
		public Assignment getFilenameAssignment_4() { return cFilenameAssignment_4; }

		//STRING
		public RuleCall getFilenameSTRINGTerminalRuleCall_4_0() { return cFilenameSTRINGTerminalRuleCall_4_0; }

		//"source: "
		public Keyword getSourceKeyword_5() { return cSourceKeyword_5; }

		//source=IPAddress
		public Assignment getSourceAssignment_6() { return cSourceAssignment_6; }

		//IPAddress
		public RuleCall getSourceIPAddressParserRuleCall_6_0() { return cSourceIPAddressParserRuleCall_6_0; }

		//requests+=NormalRequest*
		public Assignment getRequestsAssignment_7() { return cRequestsAssignment_7; }

		//NormalRequest
		public RuleCall getRequestsNormalRequestParserRuleCall_7_0() { return cRequestsNormalRequestParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class AttackerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attacker");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeAttackerKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cBelongToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFilenameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFilenameSTRINGTerminalRuleCall_4_0 = (RuleCall)cFilenameAssignment_4.eContents().get(0);
		private final Keyword cSourceKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSourceAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSourceIPAddressParserRuleCall_6_0 = (RuleCall)cSourceAssignment_6.eContents().get(0);
		private final Assignment cRequestsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRequestsMaliciousRequestParserRuleCall_7_0 = (RuleCall)cRequestsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Attacker:
		//	type="Attacker" name=ID "{" "belongTo" filename=STRING "source: " source=IPAddress requests+=MaliciousRequest* "}";
		@Override public ParserRule getRule() { return rule; }

		//type="Attacker" name=ID "{" "belongTo" filename=STRING "source: " source=IPAddress requests+=MaliciousRequest* "}"
		public Group getGroup() { return cGroup; }

		//type="Attacker"
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//"Attacker"
		public Keyword getTypeAttackerKeyword_0_0() { return cTypeAttackerKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"belongTo"
		public Keyword getBelongToKeyword_3() { return cBelongToKeyword_3; }

		//filename=STRING
		public Assignment getFilenameAssignment_4() { return cFilenameAssignment_4; }

		//STRING
		public RuleCall getFilenameSTRINGTerminalRuleCall_4_0() { return cFilenameSTRINGTerminalRuleCall_4_0; }

		//"source: "
		public Keyword getSourceKeyword_5() { return cSourceKeyword_5; }

		//source=IPAddress
		public Assignment getSourceAssignment_6() { return cSourceAssignment_6; }

		//IPAddress
		public RuleCall getSourceIPAddressParserRuleCall_6_0() { return cSourceIPAddressParserRuleCall_6_0; }

		//requests+=MaliciousRequest*
		public Assignment getRequestsAssignment_7() { return cRequestsAssignment_7; }

		//MaliciousRequest
		public RuleCall getRequestsMaliciousRequestParserRuleCall_7_0() { return cRequestsMaliciousRequestParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class RequestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Request");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNormalRequestParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMaliciousRequestParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Request:
		//	NormalRequest | MaliciousRequest;
		@Override public ParserRule getRule() { return rule; }

		//NormalRequest | MaliciousRequest
		public Alternatives getAlternatives() { return cAlternatives; }

		//NormalRequest
		public RuleCall getNormalRequestParserRuleCall_0() { return cNormalRequestParserRuleCall_0; }

		//MaliciousRequest
		public RuleCall getMaliciousRequestParserRuleCall_1() { return cMaliciousRequestParserRuleCall_1; }
	}

	public class MaliciousRequestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MaliciousRequest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaliciousRequestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSourceKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSourceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSourceIPAddressParserRuleCall_4_0 = (RuleCall)cSourceAssignment_4.eContents().get(0);
		private final Keyword cDestinationKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDestinationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDestinationIPAddressParserRuleCall_6_0 = (RuleCall)cDestinationAssignment_6.eContents().get(0);
		private final Keyword cPortKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cPortAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cPortINTTerminalRuleCall_8_0 = (RuleCall)cPortAssignment_8.eContents().get(0);
		private final Keyword cDataKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cDataAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cDataSTRINGTerminalRuleCall_10_0 = (RuleCall)cDataAssignment_10.eContents().get(0);
		private final Keyword cProtocolKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cProtocolAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cProtocolProtocolEnumRuleCall_12_0 = (RuleCall)cProtocolAssignment_12.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//MaliciousRequest:
		//	"MaliciousRequest" name=ID "{" "source: " source=IPAddress "destination: " destination=IPAddress "port: " port=INT
		//	"data: " data=STRING "protocol: " protocol=Protocol "}";
		@Override public ParserRule getRule() { return rule; }

		//"MaliciousRequest" name=ID "{" "source: " source=IPAddress "destination: " destination=IPAddress "port: " port=INT
		//"data: " data=STRING "protocol: " protocol=Protocol "}"
		public Group getGroup() { return cGroup; }

		//"MaliciousRequest"
		public Keyword getMaliciousRequestKeyword_0() { return cMaliciousRequestKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"source: "
		public Keyword getSourceKeyword_3() { return cSourceKeyword_3; }

		//source=IPAddress
		public Assignment getSourceAssignment_4() { return cSourceAssignment_4; }

		//IPAddress
		public RuleCall getSourceIPAddressParserRuleCall_4_0() { return cSourceIPAddressParserRuleCall_4_0; }

		//"destination: "
		public Keyword getDestinationKeyword_5() { return cDestinationKeyword_5; }

		//destination=IPAddress
		public Assignment getDestinationAssignment_6() { return cDestinationAssignment_6; }

		//IPAddress
		public RuleCall getDestinationIPAddressParserRuleCall_6_0() { return cDestinationIPAddressParserRuleCall_6_0; }

		//"port: "
		public Keyword getPortKeyword_7() { return cPortKeyword_7; }

		//port=INT
		public Assignment getPortAssignment_8() { return cPortAssignment_8; }

		//INT
		public RuleCall getPortINTTerminalRuleCall_8_0() { return cPortINTTerminalRuleCall_8_0; }

		//"data: "
		public Keyword getDataKeyword_9() { return cDataKeyword_9; }

		//data=STRING
		public Assignment getDataAssignment_10() { return cDataAssignment_10; }

		//STRING
		public RuleCall getDataSTRINGTerminalRuleCall_10_0() { return cDataSTRINGTerminalRuleCall_10_0; }

		//"protocol: "
		public Keyword getProtocolKeyword_11() { return cProtocolKeyword_11; }

		//protocol=Protocol
		public Assignment getProtocolAssignment_12() { return cProtocolAssignment_12; }

		//Protocol
		public RuleCall getProtocolProtocolEnumRuleCall_12_0() { return cProtocolProtocolEnumRuleCall_12_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}

	public class NormalRequestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NormalRequest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNormalRequestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSourceKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSourceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSourceIPAddressParserRuleCall_4_0 = (RuleCall)cSourceAssignment_4.eContents().get(0);
		private final Keyword cDestinationKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDestinationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDestinationIPAddressParserRuleCall_6_0 = (RuleCall)cDestinationAssignment_6.eContents().get(0);
		private final Keyword cPortKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cPortAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cPortINTTerminalRuleCall_8_0 = (RuleCall)cPortAssignment_8.eContents().get(0);
		private final Keyword cDataKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cDataAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cDataSTRINGTerminalRuleCall_10_0 = (RuleCall)cDataAssignment_10.eContents().get(0);
		private final Keyword cProtocolKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cProtocolAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cProtocolProtocolEnumRuleCall_12_0 = (RuleCall)cProtocolAssignment_12.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//NormalRequest:
		//	"NormalRequest" name=ID "{" "source: " source=IPAddress "destination: " destination=IPAddress "port: " port=INT
		//	"data: " data=STRING "protocol: " protocol=Protocol "}";
		@Override public ParserRule getRule() { return rule; }

		//"NormalRequest" name=ID "{" "source: " source=IPAddress "destination: " destination=IPAddress "port: " port=INT "data: "
		//data=STRING "protocol: " protocol=Protocol "}"
		public Group getGroup() { return cGroup; }

		//"NormalRequest"
		public Keyword getNormalRequestKeyword_0() { return cNormalRequestKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"source: "
		public Keyword getSourceKeyword_3() { return cSourceKeyword_3; }

		//source=IPAddress
		public Assignment getSourceAssignment_4() { return cSourceAssignment_4; }

		//IPAddress
		public RuleCall getSourceIPAddressParserRuleCall_4_0() { return cSourceIPAddressParserRuleCall_4_0; }

		//"destination: "
		public Keyword getDestinationKeyword_5() { return cDestinationKeyword_5; }

		//destination=IPAddress
		public Assignment getDestinationAssignment_6() { return cDestinationAssignment_6; }

		//IPAddress
		public RuleCall getDestinationIPAddressParserRuleCall_6_0() { return cDestinationIPAddressParserRuleCall_6_0; }

		//"port: "
		public Keyword getPortKeyword_7() { return cPortKeyword_7; }

		//port=INT
		public Assignment getPortAssignment_8() { return cPortAssignment_8; }

		//INT
		public RuleCall getPortINTTerminalRuleCall_8_0() { return cPortINTTerminalRuleCall_8_0; }

		//"data: "
		public Keyword getDataKeyword_9() { return cDataKeyword_9; }

		//data=STRING
		public Assignment getDataAssignment_10() { return cDataAssignment_10; }

		//STRING
		public RuleCall getDataSTRINGTerminalRuleCall_10_0() { return cDataSTRINGTerminalRuleCall_10_0; }

		//"protocol: "
		public Keyword getProtocolKeyword_11() { return cProtocolKeyword_11; }

		//protocol=Protocol
		public Assignment getProtocolAssignment_12() { return cProtocolAssignment_12; }

		//Protocol
		public RuleCall getProtocolProtocolEnumRuleCall_12_0() { return cProtocolProtocolEnumRuleCall_12_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}

	public class DefenderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Defender");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeDefenderKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cBelongToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFilenameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFilenameSTRINGTerminalRuleCall_4_0 = (RuleCall)cFilenameAssignment_4.eContents().get(0);
		private final Keyword cSourceKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSourceAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSourceIPAddressParserRuleCall_6_0 = (RuleCall)cSourceAssignment_6.eContents().get(0);
		private final Assignment cSecurityPolicylistAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSecurityPolicylistSecurityPolicyListParserRuleCall_7_0 = (RuleCall)cSecurityPolicylistAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Defender:
		//	type="Defender" name=ID "{" "belongTo" filename=STRING "source: " source=IPAddress
		//	securityPolicylist=SecurityPolicyList "}";
		@Override public ParserRule getRule() { return rule; }

		//type="Defender" name=ID "{" "belongTo" filename=STRING "source: " source=IPAddress securityPolicylist=SecurityPolicyList
		//"}"
		public Group getGroup() { return cGroup; }

		//type="Defender"
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//"Defender"
		public Keyword getTypeDefenderKeyword_0_0() { return cTypeDefenderKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"belongTo"
		public Keyword getBelongToKeyword_3() { return cBelongToKeyword_3; }

		//filename=STRING
		public Assignment getFilenameAssignment_4() { return cFilenameAssignment_4; }

		//STRING
		public RuleCall getFilenameSTRINGTerminalRuleCall_4_0() { return cFilenameSTRINGTerminalRuleCall_4_0; }

		//"source: "
		public Keyword getSourceKeyword_5() { return cSourceKeyword_5; }

		//source=IPAddress
		public Assignment getSourceAssignment_6() { return cSourceAssignment_6; }

		//IPAddress
		public RuleCall getSourceIPAddressParserRuleCall_6_0() { return cSourceIPAddressParserRuleCall_6_0; }

		//securityPolicylist=SecurityPolicyList
		public Assignment getSecurityPolicylistAssignment_7() { return cSecurityPolicylistAssignment_7; }

		//SecurityPolicyList
		public RuleCall getSecurityPolicylistSecurityPolicyListParserRuleCall_7_0() { return cSecurityPolicylistSecurityPolicyListParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class SecurityPolicyListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SecurityPolicyList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSecurityPolicyListKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSecurityPoliciesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSecurityPoliciesSecurityPolicyParserRuleCall_3_0 = (RuleCall)cSecurityPoliciesAssignment_3.eContents().get(0);
		private final Assignment cConditionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionsConditionParserRuleCall_4_0 = (RuleCall)cConditionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SecurityPolicyList:
		//	"SecurityPolicyList" name=ID "{" securityPolicies+=SecurityPolicy* conditions+=Condition* "}";
		@Override public ParserRule getRule() { return rule; }

		//"SecurityPolicyList" name=ID "{" securityPolicies+=SecurityPolicy* conditions+=Condition* "}"
		public Group getGroup() { return cGroup; }

		//"SecurityPolicyList"
		public Keyword getSecurityPolicyListKeyword_0() { return cSecurityPolicyListKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//securityPolicies+=SecurityPolicy*
		public Assignment getSecurityPoliciesAssignment_3() { return cSecurityPoliciesAssignment_3; }

		//SecurityPolicy
		public RuleCall getSecurityPoliciesSecurityPolicyParserRuleCall_3_0() { return cSecurityPoliciesSecurityPolicyParserRuleCall_3_0; }

		//conditions+=Condition*
		public Assignment getConditionsAssignment_4() { return cConditionsAssignment_4; }

		//Condition
		public RuleCall getConditionsConditionParserRuleCall_4_0() { return cConditionsConditionParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class SecurityPolicyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SecurityPolicy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSecurityPolicyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEndPointAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEndPointEndPointParserRuleCall_3_0 = (RuleCall)cEndPointAssignment_3.eContents().get(0);
		private final Keyword cIfKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cConditionlistAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cConditionlistConditionCrossReference_6_0 = (CrossReference)cConditionlistAssignment_6.eContents().get(0);
		private final RuleCall cConditionlistConditionIDTerminalRuleCall_6_0_1 = (RuleCall)cConditionlistConditionCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cOperationListAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final Alternatives cOperationListAlternatives_7_0_0 = (Alternatives)cOperationListAssignment_7_0.eContents().get(0);
		private final Keyword cOperationListAmpersandKeyword_7_0_0_0 = (Keyword)cOperationListAlternatives_7_0_0.eContents().get(0);
		private final Keyword cOperationListVerticalLineKeyword_7_0_0_1 = (Keyword)cOperationListAlternatives_7_0_0.eContents().get(1);
		private final Assignment cConditionlistAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cConditionlistConditionCrossReference_7_1_0 = (CrossReference)cConditionlistAssignment_7_1.eContents().get(0);
		private final RuleCall cConditionlistConditionIDTerminalRuleCall_7_1_0_1 = (RuleCall)cConditionlistConditionCrossReference_7_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cThenKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cTrueActionListAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cTrueActionListActionParserRuleCall_10_0 = (RuleCall)cTrueActionListAssignment_10.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cAmpersandKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cTrueActionListAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cTrueActionListActionParserRuleCall_11_1_0 = (RuleCall)cTrueActionListAssignment_11_1.eContents().get(0);
		private final Keyword cOtherwiseKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cFalseActionListAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cFalseActionListActionParserRuleCall_13_0 = (RuleCall)cFalseActionListAssignment_13.eContents().get(0);
		private final Group cGroup_14 = (Group)cGroup.eContents().get(14);
		private final Keyword cAmpersandKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final Assignment cFalseActionListAssignment_14_1 = (Assignment)cGroup_14.eContents().get(1);
		private final RuleCall cFalseActionListActionParserRuleCall_14_1_0 = (RuleCall)cFalseActionListAssignment_14_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		//SecurityPolicy:
		//	"SecurityPolicy" name=ID "{" endPoint=EndPoint "if" "(" conditionlist+=[Condition] (operationList+=("&" | "|")
		//	conditionlist+=[Condition])* ")" "then" trueActionList+=Action ("&" trueActionList+=Action)* "otherwise"
		//	falseActionList+=Action ("&" falseActionList+=Action)* "}";
		@Override public ParserRule getRule() { return rule; }

		//"SecurityPolicy" name=ID "{" endPoint=EndPoint "if" "(" conditionlist+=[Condition] (operationList+=("&" | "|")
		//conditionlist+=[Condition])* ")" "then" trueActionList+=Action ("&" trueActionList+=Action)* "otherwise"
		//falseActionList+=Action ("&" falseActionList+=Action)* "}"
		public Group getGroup() { return cGroup; }

		//"SecurityPolicy"
		public Keyword getSecurityPolicyKeyword_0() { return cSecurityPolicyKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//endPoint=EndPoint
		public Assignment getEndPointAssignment_3() { return cEndPointAssignment_3; }

		//EndPoint
		public RuleCall getEndPointEndPointParserRuleCall_3_0() { return cEndPointEndPointParserRuleCall_3_0; }

		//"if"
		public Keyword getIfKeyword_4() { return cIfKeyword_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }

		//conditionlist+=[Condition]
		public Assignment getConditionlistAssignment_6() { return cConditionlistAssignment_6; }

		//[Condition]
		public CrossReference getConditionlistConditionCrossReference_6_0() { return cConditionlistConditionCrossReference_6_0; }

		//ID
		public RuleCall getConditionlistConditionIDTerminalRuleCall_6_0_1() { return cConditionlistConditionIDTerminalRuleCall_6_0_1; }

		//(operationList+=("&" | "|") conditionlist+=[Condition])*
		public Group getGroup_7() { return cGroup_7; }

		//operationList+=("&" | "|")
		public Assignment getOperationListAssignment_7_0() { return cOperationListAssignment_7_0; }

		//"&" | "|"
		public Alternatives getOperationListAlternatives_7_0_0() { return cOperationListAlternatives_7_0_0; }

		//"&"
		public Keyword getOperationListAmpersandKeyword_7_0_0_0() { return cOperationListAmpersandKeyword_7_0_0_0; }

		//"|"
		public Keyword getOperationListVerticalLineKeyword_7_0_0_1() { return cOperationListVerticalLineKeyword_7_0_0_1; }

		//conditionlist+=[Condition]
		public Assignment getConditionlistAssignment_7_1() { return cConditionlistAssignment_7_1; }

		//[Condition]
		public CrossReference getConditionlistConditionCrossReference_7_1_0() { return cConditionlistConditionCrossReference_7_1_0; }

		//ID
		public RuleCall getConditionlistConditionIDTerminalRuleCall_7_1_0_1() { return cConditionlistConditionIDTerminalRuleCall_7_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }

		//"then"
		public Keyword getThenKeyword_9() { return cThenKeyword_9; }

		//trueActionList+=Action
		public Assignment getTrueActionListAssignment_10() { return cTrueActionListAssignment_10; }

		//Action
		public RuleCall getTrueActionListActionParserRuleCall_10_0() { return cTrueActionListActionParserRuleCall_10_0; }

		//("&" trueActionList+=Action)*
		public Group getGroup_11() { return cGroup_11; }

		//"&"
		public Keyword getAmpersandKeyword_11_0() { return cAmpersandKeyword_11_0; }

		//trueActionList+=Action
		public Assignment getTrueActionListAssignment_11_1() { return cTrueActionListAssignment_11_1; }

		//Action
		public RuleCall getTrueActionListActionParserRuleCall_11_1_0() { return cTrueActionListActionParserRuleCall_11_1_0; }

		//"otherwise"
		public Keyword getOtherwiseKeyword_12() { return cOtherwiseKeyword_12; }

		//falseActionList+=Action
		public Assignment getFalseActionListAssignment_13() { return cFalseActionListAssignment_13; }

		//Action
		public RuleCall getFalseActionListActionParserRuleCall_13_0() { return cFalseActionListActionParserRuleCall_13_0; }

		//("&" falseActionList+=Action)*
		public Group getGroup_14() { return cGroup_14; }

		//"&"
		public Keyword getAmpersandKeyword_14_0() { return cAmpersandKeyword_14_0; }

		//falseActionList+=Action
		public Assignment getFalseActionListAssignment_14_1() { return cFalseActionListAssignment_14_1; }

		//Action
		public RuleCall getFalseActionListActionParserRuleCall_14_1_0() { return cFalseActionListActionParserRuleCall_14_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_15() { return cRightCurlyBracketKeyword_15; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSubConditionListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSubConditionListSubConditionParserRuleCall_3_0 = (RuleCall)cSubConditionListAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAmpersandKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSubConditionListAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSubConditionListSubConditionParserRuleCall_4_1_0 = (RuleCall)cSubConditionListAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Condition:
		//	"Condition" name=ID "{" subConditionList+=SubCondition ("&" subConditionList+=SubCondition)* "}";
		@Override public ParserRule getRule() { return rule; }

		//"Condition" name=ID "{" subConditionList+=SubCondition ("&" subConditionList+=SubCondition)* "}"
		public Group getGroup() { return cGroup; }

		//"Condition"
		public Keyword getConditionKeyword_0() { return cConditionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//subConditionList+=SubCondition
		public Assignment getSubConditionListAssignment_3() { return cSubConditionListAssignment_3; }

		//SubCondition
		public RuleCall getSubConditionListSubConditionParserRuleCall_3_0() { return cSubConditionListSubConditionParserRuleCall_3_0; }

		//("&" subConditionList+=SubCondition)*
		public Group getGroup_4() { return cGroup_4; }

		//"&"
		public Keyword getAmpersandKeyword_4_0() { return cAmpersandKeyword_4_0; }

		//subConditionList+=SubCondition
		public Assignment getSubConditionListAssignment_4_1() { return cSubConditionListAssignment_4_1; }

		//SubCondition
		public RuleCall getSubConditionListSubConditionParserRuleCall_4_1_0() { return cSubConditionListSubConditionParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDropRequestParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBlockSenderParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPassRequestParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Action:
		//	DropRequest | BlockSender | PassRequest;
		@Override public ParserRule getRule() { return rule; }

		//DropRequest | BlockSender | PassRequest
		public Alternatives getAlternatives() { return cAlternatives; }

		//DropRequest
		public RuleCall getDropRequestParserRuleCall_0() { return cDropRequestParserRuleCall_0; }

		//BlockSender
		public RuleCall getBlockSenderParserRuleCall_1() { return cBlockSenderParserRuleCall_1; }

		//PassRequest
		public RuleCall getPassRequestParserRuleCall_2() { return cPassRequestParserRuleCall_2; }
	}

	public class SubConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProtocolCheckParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHTTPMethodCheckParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRegExpMatchParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFrequencyCheckParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cHTTPParamLenCheckParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//SubCondition:
		//	ProtocolCheck | HTTPMethodCheck | RegExpMatch | FrequencyCheck | HTTPParamLenCheck;
		@Override public ParserRule getRule() { return rule; }

		//ProtocolCheck | HTTPMethodCheck | RegExpMatch | FrequencyCheck | HTTPParamLenCheck
		public Alternatives getAlternatives() { return cAlternatives; }

		//ProtocolCheck
		public RuleCall getProtocolCheckParserRuleCall_0() { return cProtocolCheckParserRuleCall_0; }

		//HTTPMethodCheck
		public RuleCall getHTTPMethodCheckParserRuleCall_1() { return cHTTPMethodCheckParserRuleCall_1; }

		//RegExpMatch
		public RuleCall getRegExpMatchParserRuleCall_2() { return cRegExpMatchParserRuleCall_2; }

		//FrequencyCheck
		public RuleCall getFrequencyCheckParserRuleCall_3() { return cFrequencyCheckParserRuleCall_3; }

		//HTTPParamLenCheck
		public RuleCall getHTTPParamLenCheckParserRuleCall_4() { return cHTTPParamLenCheckParserRuleCall_4; }
	}

	public class ProtocolCheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProtocolCheck");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameIsRequestProtocolEqualsToKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueProtocolEnumRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ProtocolCheck:
		//	name="isRequestProtocolEqualsTo" "(" value=Protocol ")";
		@Override public ParserRule getRule() { return rule; }

		//name="isRequestProtocolEqualsTo" "(" value=Protocol ")"
		public Group getGroup() { return cGroup; }

		//name="isRequestProtocolEqualsTo"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"isRequestProtocolEqualsTo"
		public Keyword getNameIsRequestProtocolEqualsToKeyword_0_0() { return cNameIsRequestProtocolEqualsToKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//value=Protocol
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Protocol
		public RuleCall getValueProtocolEnumRuleCall_2_0() { return cValueProtocolEnumRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class HTTPMethodCheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HTTPMethodCheck");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameIsHTTPMethodEqualsToKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cValueAlternatives_2_0 = (Alternatives)cValueAssignment_2.eContents().get(0);
		private final Keyword cValueGETKeyword_2_0_0 = (Keyword)cValueAlternatives_2_0.eContents().get(0);
		private final Keyword cValuePOSTKeyword_2_0_1 = (Keyword)cValueAlternatives_2_0.eContents().get(1);
		private final Keyword cValueHEADKeyword_2_0_2 = (Keyword)cValueAlternatives_2_0.eContents().get(2);
		private final Keyword cValueDELETEKeyword_2_0_3 = (Keyword)cValueAlternatives_2_0.eContents().get(3);
		private final Keyword cValuePUTKeyword_2_0_4 = (Keyword)cValueAlternatives_2_0.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//HTTPMethodCheck:
		//	name="isHTTPMethodEqualsTo" "(" value=("GET" | "POST" | "HEAD" | "DELETE" | "PUT") ")";
		@Override public ParserRule getRule() { return rule; }

		//name="isHTTPMethodEqualsTo" "(" value=("GET" | "POST" | "HEAD" | "DELETE" | "PUT") ")"
		public Group getGroup() { return cGroup; }

		//name="isHTTPMethodEqualsTo"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"isHTTPMethodEqualsTo"
		public Keyword getNameIsHTTPMethodEqualsToKeyword_0_0() { return cNameIsHTTPMethodEqualsToKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//value=("GET" | "POST" | "HEAD" | "DELETE" | "PUT")
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//"GET" | "POST" | "HEAD" | "DELETE" | "PUT"
		public Alternatives getValueAlternatives_2_0() { return cValueAlternatives_2_0; }

		//"GET"
		public Keyword getValueGETKeyword_2_0_0() { return cValueGETKeyword_2_0_0; }

		//"POST"
		public Keyword getValuePOSTKeyword_2_0_1() { return cValuePOSTKeyword_2_0_1; }

		//"HEAD"
		public Keyword getValueHEADKeyword_2_0_2() { return cValueHEADKeyword_2_0_2; }

		//"DELETE"
		public Keyword getValueDELETEKeyword_2_0_3() { return cValueDELETEKeyword_2_0_3; }

		//"PUT"
		public Keyword getValuePUTKeyword_2_0_4() { return cValuePUTKeyword_2_0_4; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class RegExpMatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RegExpMatch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameIsParaContentMatchRegExpKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RegExpMatch:
		//	name="isParaContentMatchRegExp" "(" value=STRING ")";
		@Override public ParserRule getRule() { return rule; }

		//name="isParaContentMatchRegExp" "(" value=STRING ")"
		public Group getGroup() { return cGroup; }

		//name="isParaContentMatchRegExp"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"isParaContentMatchRegExp"
		public Keyword getNameIsParaContentMatchRegExpKeyword_0_0() { return cNameIsParaContentMatchRegExpKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class FrequencyCheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FrequencyCheck");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameIsRequestFrequencyLessThanKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FrequencyCheck:
		//	name="isRequestFrequencyLessThan" "(" value=INT ")";
		@Override public ParserRule getRule() { return rule; }

		//name="isRequestFrequencyLessThan" "(" value=INT ")"
		public Group getGroup() { return cGroup; }

		//name="isRequestFrequencyLessThan"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"isRequestFrequencyLessThan"
		public Keyword getNameIsRequestFrequencyLessThanKeyword_0_0() { return cNameIsRequestFrequencyLessThanKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class HTTPParamLenCheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HTTPParamLenCheck");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cNameIsParaLenghtLessThanKeyword_0_0_0 = (Keyword)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cNameIsParaLenghtGreaterThanKeyword_1_0_0 = (Keyword)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_1_2_0 = (RuleCall)cValueAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cNameIsParaLenghtEqualsToKeyword_2_0_0 = (Keyword)cNameAssignment_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cValueAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_2_0 = (RuleCall)cValueAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//HTTPParamLenCheck:
		//	name="isParaLenghtLessThan" "(" value=INT ")" | name="isParaLenghtGreaterThan" "(" value=INT ")" |
		//	name="isParaLenghtEqualsTo" "(" value=INT ")";
		@Override public ParserRule getRule() { return rule; }

		//name="isParaLenghtLessThan" "(" value=INT ")" | name="isParaLenghtGreaterThan" "(" value=INT ")" |
		//name="isParaLenghtEqualsTo" "(" value=INT ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//name="isParaLenghtLessThan" "(" value=INT ")"
		public Group getGroup_0() { return cGroup_0; }

		//name="isParaLenghtLessThan"
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//"isParaLenghtLessThan"
		public Keyword getNameIsParaLenghtLessThanKeyword_0_0_0() { return cNameIsParaLenghtLessThanKeyword_0_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }

		//value=INT
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_2_0() { return cValueINTTerminalRuleCall_0_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }

		//name="isParaLenghtGreaterThan" "(" value=INT ")"
		public Group getGroup_1() { return cGroup_1; }

		//name="isParaLenghtGreaterThan"
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//"isParaLenghtGreaterThan"
		public Keyword getNameIsParaLenghtGreaterThanKeyword_1_0_0() { return cNameIsParaLenghtGreaterThanKeyword_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//value=INT
		public Assignment getValueAssignment_1_2() { return cValueAssignment_1_2; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_2_0() { return cValueINTTerminalRuleCall_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//name="isParaLenghtEqualsTo" "(" value=INT ")"
		public Group getGroup_2() { return cGroup_2; }

		//name="isParaLenghtEqualsTo"
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }

		//"isParaLenghtEqualsTo"
		public Keyword getNameIsParaLenghtEqualsToKeyword_2_0_0() { return cNameIsParaLenghtEqualsToKeyword_2_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//value=INT
		public Assignment getValueAssignment_2_2() { return cValueAssignment_2_2; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_2_2_0() { return cValueINTTerminalRuleCall_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class EndPointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EndPoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEndpointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPortAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPortINTTerminalRuleCall_2_0 = (RuleCall)cPortAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cProtocolAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cProtocolProtocolEnumRuleCall_4_0 = (RuleCall)cProtocolAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EndPoint:
		//	"endpoint" "(" port=INT "," protocol=Protocol ")";
		@Override public ParserRule getRule() { return rule; }

		//"endpoint" "(" port=INT "," protocol=Protocol ")"
		public Group getGroup() { return cGroup; }

		//"endpoint"
		public Keyword getEndpointKeyword_0() { return cEndpointKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//port=INT
		public Assignment getPortAssignment_2() { return cPortAssignment_2; }

		//INT
		public RuleCall getPortINTTerminalRuleCall_2_0() { return cPortINTTerminalRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//protocol=Protocol
		public Assignment getProtocolAssignment_4() { return cProtocolAssignment_4; }

		//Protocol
		public RuleCall getProtocolProtocolEnumRuleCall_4_0() { return cProtocolProtocolEnumRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class DropRequestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DropRequest");
		private final Assignment cActionAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cActionDropKeyword_0 = (Keyword)cActionAssignment.eContents().get(0);
		
		//DropRequest:
		//	action="drop";
		@Override public ParserRule getRule() { return rule; }

		//action="drop"
		public Assignment getActionAssignment() { return cActionAssignment; }

		//"drop"
		public Keyword getActionDropKeyword_0() { return cActionDropKeyword_0; }
	}

	public class BlockSenderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BlockSender");
		private final Assignment cActionAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cActionBlockKeyword_0 = (Keyword)cActionAssignment.eContents().get(0);
		
		//BlockSender:
		//	action="block";
		@Override public ParserRule getRule() { return rule; }

		//action="block"
		public Assignment getActionAssignment() { return cActionAssignment; }

		//"block"
		public Keyword getActionBlockKeyword_0() { return cActionBlockKeyword_0; }
	}

	public class PassRequestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PassRequest");
		private final Assignment cActionAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cActionPassKeyword_0 = (Keyword)cActionAssignment.eContents().get(0);
		
		//PassRequest:
		//	action="pass";
		@Override public ParserRule getRule() { return rule; }

		//action="pass"
		public Assignment getActionAssignment() { return cActionAssignment; }

		//"pass"
		public Keyword getActionPassKeyword_0() { return cActionPassKeyword_0; }
	}

	public class IPAddressElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IPAddress");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cByte1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cByte1INTTerminalRuleCall_0_0 = (RuleCall)cByte1Assignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cByte2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cByte2INTTerminalRuleCall_2_0 = (RuleCall)cByte2Assignment_2.eContents().get(0);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cByte3Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cByte3INTTerminalRuleCall_4_0 = (RuleCall)cByte3Assignment_4.eContents().get(0);
		private final Keyword cFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cByte4Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cByte4INTTerminalRuleCall_6_0 = (RuleCall)cByte4Assignment_6.eContents().get(0);
		
		//IPAddress:
		//	byte1=INT "." byte2=INT "." byte3=INT "." byte4=INT;
		@Override public ParserRule getRule() { return rule; }

		//byte1=INT "." byte2=INT "." byte3=INT "." byte4=INT
		public Group getGroup() { return cGroup; }

		//byte1=INT
		public Assignment getByte1Assignment_0() { return cByte1Assignment_0; }

		//INT
		public RuleCall getByte1INTTerminalRuleCall_0_0() { return cByte1INTTerminalRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//byte2=INT
		public Assignment getByte2Assignment_2() { return cByte2Assignment_2; }

		//INT
		public RuleCall getByte2INTTerminalRuleCall_2_0() { return cByte2INTTerminalRuleCall_2_0; }

		//"."
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }

		//byte3=INT
		public Assignment getByte3Assignment_4() { return cByte3Assignment_4; }

		//INT
		public RuleCall getByte3INTTerminalRuleCall_4_0() { return cByte3INTTerminalRuleCall_4_0; }

		//"."
		public Keyword getFullStopKeyword_5() { return cFullStopKeyword_5; }

		//byte4=INT
		public Assignment getByte4Assignment_6() { return cByte4Assignment_6; }

		//INT
		public RuleCall getByte4INTTerminalRuleCall_6_0() { return cByte4INTTerminalRuleCall_6_0; }
	}
	
	
	public class ProtocolElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Protocol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHTTPEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHTTPHTTPKeyword_0_0 = (Keyword)cHTTPEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cHTTPSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cHTTPSHTTPSKeyword_1_0 = (Keyword)cHTTPSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFTPEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFTPFTPKeyword_2_0 = (Keyword)cFTPEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSSHEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSSHSSHKeyword_3_0 = (Keyword)cSSHEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Protocol:
		//	HTTP | HTTPS | FTP | SSH;
		public EnumRule getRule() { return rule; }

		//HTTP | HTTPS | FTP | SSH
		public Alternatives getAlternatives() { return cAlternatives; }

		//HTTP
		public EnumLiteralDeclaration getHTTPEnumLiteralDeclaration_0() { return cHTTPEnumLiteralDeclaration_0; }

		//"HTTP"
		public Keyword getHTTPHTTPKeyword_0_0() { return cHTTPHTTPKeyword_0_0; }

		//HTTPS
		public EnumLiteralDeclaration getHTTPSEnumLiteralDeclaration_1() { return cHTTPSEnumLiteralDeclaration_1; }

		//"HTTPS"
		public Keyword getHTTPSHTTPSKeyword_1_0() { return cHTTPSHTTPSKeyword_1_0; }

		//FTP
		public EnumLiteralDeclaration getFTPEnumLiteralDeclaration_2() { return cFTPEnumLiteralDeclaration_2; }

		//"FTP"
		public Keyword getFTPFTPKeyword_2_0() { return cFTPFTPKeyword_2_0; }

		//SSH
		public EnumLiteralDeclaration getSSHEnumLiteralDeclaration_3() { return cSSHEnumLiteralDeclaration_3; }

		//"SSH"
		public Keyword getSSHSSHKeyword_3_0() { return cSSHSSHKeyword_3_0; }
	}
	
	private final HttpShieldModelElements pHttpShieldModel;
	private final AgentElements pAgent;
	private final UserElements pUser;
	private final AttackerElements pAttacker;
	private final RequestElements pRequest;
	private final MaliciousRequestElements pMaliciousRequest;
	private final NormalRequestElements pNormalRequest;
	private final DefenderElements pDefender;
	private final SecurityPolicyListElements pSecurityPolicyList;
	private final SecurityPolicyElements pSecurityPolicy;
	private final ConditionElements pCondition;
	private final ActionElements pAction;
	private final SubConditionElements pSubCondition;
	private final ProtocolCheckElements pProtocolCheck;
	private final HTTPMethodCheckElements pHTTPMethodCheck;
	private final RegExpMatchElements pRegExpMatch;
	private final FrequencyCheckElements pFrequencyCheck;
	private final HTTPParamLenCheckElements pHTTPParamLenCheck;
	private final EndPointElements pEndPoint;
	private final DropRequestElements pDropRequest;
	private final BlockSenderElements pBlockSender;
	private final PassRequestElements pPassRequest;
	private final IPAddressElements pIPAddress;
	private final ProtocolElements unknownRuleProtocol;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslSampleGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pHttpShieldModel = new HttpShieldModelElements();
		this.pAgent = new AgentElements();
		this.pUser = new UserElements();
		this.pAttacker = new AttackerElements();
		this.pRequest = new RequestElements();
		this.pMaliciousRequest = new MaliciousRequestElements();
		this.pNormalRequest = new NormalRequestElements();
		this.pDefender = new DefenderElements();
		this.pSecurityPolicyList = new SecurityPolicyListElements();
		this.pSecurityPolicy = new SecurityPolicyElements();
		this.pCondition = new ConditionElements();
		this.pAction = new ActionElements();
		this.pSubCondition = new SubConditionElements();
		this.pProtocolCheck = new ProtocolCheckElements();
		this.pHTTPMethodCheck = new HTTPMethodCheckElements();
		this.pRegExpMatch = new RegExpMatchElements();
		this.pFrequencyCheck = new FrequencyCheckElements();
		this.pHTTPParamLenCheck = new HTTPParamLenCheckElements();
		this.pEndPoint = new EndPointElements();
		this.pDropRequest = new DropRequestElements();
		this.pBlockSender = new BlockSenderElements();
		this.pPassRequest = new PassRequestElements();
		this.pIPAddress = new IPAddressElements();
		this.unknownRuleProtocol = new ProtocolElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDslSample".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//HttpShieldModel:
	//	agents+=Agent*;
	public HttpShieldModelElements getHttpShieldModelAccess() {
		return pHttpShieldModel;
	}
	
	public ParserRule getHttpShieldModelRule() {
		return getHttpShieldModelAccess().getRule();
	}

	//Agent:
	//	User | Attacker | Defender;
	public AgentElements getAgentAccess() {
		return pAgent;
	}
	
	public ParserRule getAgentRule() {
		return getAgentAccess().getRule();
	}

	//User:
	//	type="User" name=ID "{" "belongTo" filename=STRING "source: " source=IPAddress requests+=NormalRequest* "}";
	public UserElements getUserAccess() {
		return pUser;
	}
	
	public ParserRule getUserRule() {
		return getUserAccess().getRule();
	}

	//Attacker:
	//	type="Attacker" name=ID "{" "belongTo" filename=STRING "source: " source=IPAddress requests+=MaliciousRequest* "}";
	public AttackerElements getAttackerAccess() {
		return pAttacker;
	}
	
	public ParserRule getAttackerRule() {
		return getAttackerAccess().getRule();
	}

	//Request:
	//	NormalRequest | MaliciousRequest;
	public RequestElements getRequestAccess() {
		return pRequest;
	}
	
	public ParserRule getRequestRule() {
		return getRequestAccess().getRule();
	}

	//MaliciousRequest:
	//	"MaliciousRequest" name=ID "{" "source: " source=IPAddress "destination: " destination=IPAddress "port: " port=INT
	//	"data: " data=STRING "protocol: " protocol=Protocol "}";
	public MaliciousRequestElements getMaliciousRequestAccess() {
		return pMaliciousRequest;
	}
	
	public ParserRule getMaliciousRequestRule() {
		return getMaliciousRequestAccess().getRule();
	}

	//NormalRequest:
	//	"NormalRequest" name=ID "{" "source: " source=IPAddress "destination: " destination=IPAddress "port: " port=INT
	//	"data: " data=STRING "protocol: " protocol=Protocol "}";
	public NormalRequestElements getNormalRequestAccess() {
		return pNormalRequest;
	}
	
	public ParserRule getNormalRequestRule() {
		return getNormalRequestAccess().getRule();
	}

	//Defender:
	//	type="Defender" name=ID "{" "belongTo" filename=STRING "source: " source=IPAddress
	//	securityPolicylist=SecurityPolicyList "}";
	public DefenderElements getDefenderAccess() {
		return pDefender;
	}
	
	public ParserRule getDefenderRule() {
		return getDefenderAccess().getRule();
	}

	//SecurityPolicyList:
	//	"SecurityPolicyList" name=ID "{" securityPolicies+=SecurityPolicy* conditions+=Condition* "}";
	public SecurityPolicyListElements getSecurityPolicyListAccess() {
		return pSecurityPolicyList;
	}
	
	public ParserRule getSecurityPolicyListRule() {
		return getSecurityPolicyListAccess().getRule();
	}

	//SecurityPolicy:
	//	"SecurityPolicy" name=ID "{" endPoint=EndPoint "if" "(" conditionlist+=[Condition] (operationList+=("&" | "|")
	//	conditionlist+=[Condition])* ")" "then" trueActionList+=Action ("&" trueActionList+=Action)* "otherwise"
	//	falseActionList+=Action ("&" falseActionList+=Action)* "}";
	public SecurityPolicyElements getSecurityPolicyAccess() {
		return pSecurityPolicy;
	}
	
	public ParserRule getSecurityPolicyRule() {
		return getSecurityPolicyAccess().getRule();
	}

	//Condition:
	//	"Condition" name=ID "{" subConditionList+=SubCondition ("&" subConditionList+=SubCondition)* "}";
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//Action:
	//	DropRequest | BlockSender | PassRequest;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//SubCondition:
	//	ProtocolCheck | HTTPMethodCheck | RegExpMatch | FrequencyCheck | HTTPParamLenCheck;
	public SubConditionElements getSubConditionAccess() {
		return pSubCondition;
	}
	
	public ParserRule getSubConditionRule() {
		return getSubConditionAccess().getRule();
	}

	//ProtocolCheck:
	//	name="isRequestProtocolEqualsTo" "(" value=Protocol ")";
	public ProtocolCheckElements getProtocolCheckAccess() {
		return pProtocolCheck;
	}
	
	public ParserRule getProtocolCheckRule() {
		return getProtocolCheckAccess().getRule();
	}

	//HTTPMethodCheck:
	//	name="isHTTPMethodEqualsTo" "(" value=("GET" | "POST" | "HEAD" | "DELETE" | "PUT") ")";
	public HTTPMethodCheckElements getHTTPMethodCheckAccess() {
		return pHTTPMethodCheck;
	}
	
	public ParserRule getHTTPMethodCheckRule() {
		return getHTTPMethodCheckAccess().getRule();
	}

	//RegExpMatch:
	//	name="isParaContentMatchRegExp" "(" value=STRING ")";
	public RegExpMatchElements getRegExpMatchAccess() {
		return pRegExpMatch;
	}
	
	public ParserRule getRegExpMatchRule() {
		return getRegExpMatchAccess().getRule();
	}

	//FrequencyCheck:
	//	name="isRequestFrequencyLessThan" "(" value=INT ")";
	public FrequencyCheckElements getFrequencyCheckAccess() {
		return pFrequencyCheck;
	}
	
	public ParserRule getFrequencyCheckRule() {
		return getFrequencyCheckAccess().getRule();
	}

	//HTTPParamLenCheck:
	//	name="isParaLenghtLessThan" "(" value=INT ")" | name="isParaLenghtGreaterThan" "(" value=INT ")" |
	//	name="isParaLenghtEqualsTo" "(" value=INT ")";
	public HTTPParamLenCheckElements getHTTPParamLenCheckAccess() {
		return pHTTPParamLenCheck;
	}
	
	public ParserRule getHTTPParamLenCheckRule() {
		return getHTTPParamLenCheckAccess().getRule();
	}

	//EndPoint:
	//	"endpoint" "(" port=INT "," protocol=Protocol ")";
	public EndPointElements getEndPointAccess() {
		return pEndPoint;
	}
	
	public ParserRule getEndPointRule() {
		return getEndPointAccess().getRule();
	}

	//DropRequest:
	//	action="drop";
	public DropRequestElements getDropRequestAccess() {
		return pDropRequest;
	}
	
	public ParserRule getDropRequestRule() {
		return getDropRequestAccess().getRule();
	}

	//BlockSender:
	//	action="block";
	public BlockSenderElements getBlockSenderAccess() {
		return pBlockSender;
	}
	
	public ParserRule getBlockSenderRule() {
		return getBlockSenderAccess().getRule();
	}

	//PassRequest:
	//	action="pass";
	public PassRequestElements getPassRequestAccess() {
		return pPassRequest;
	}
	
	public ParserRule getPassRequestRule() {
		return getPassRequestAccess().getRule();
	}

	//IPAddress:
	//	byte1=INT "." byte2=INT "." byte3=INT "." byte4=INT;
	public IPAddressElements getIPAddressAccess() {
		return pIPAddress;
	}
	
	public ParserRule getIPAddressRule() {
		return getIPAddressAccess().getRule();
	}

	//enum Protocol:
	//	HTTP | HTTPS | FTP | SSH;
	public ProtocolElements getProtocolAccess() {
		return unknownRuleProtocol;
	}
	
	public EnumRule getProtocolRule() {
		return getProtocolAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
