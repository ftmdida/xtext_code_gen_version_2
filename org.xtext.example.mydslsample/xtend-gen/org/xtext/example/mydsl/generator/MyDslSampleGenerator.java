/**
 * generated by Xtext
 */
package org.xtext.example.mydsl.generator;

import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.mydsl.myDslSample.Action;
import org.xtext.example.mydsl.myDslSample.Agent;
import org.xtext.example.mydsl.myDslSample.Attacker;
import org.xtext.example.mydsl.myDslSample.Condition;
import org.xtext.example.mydsl.myDslSample.Defender;
import org.xtext.example.mydsl.myDslSample.EndPoint;
import org.xtext.example.mydsl.myDslSample.FrequencyCheck;
import org.xtext.example.mydsl.myDslSample.HTTPMethodCheck;
import org.xtext.example.mydsl.myDslSample.HTTPParamLenCheck;
import org.xtext.example.mydsl.myDslSample.IPAddress;
import org.xtext.example.mydsl.myDslSample.MaliciousRequest;
import org.xtext.example.mydsl.myDslSample.NormalRequest;
import org.xtext.example.mydsl.myDslSample.Protocol;
import org.xtext.example.mydsl.myDslSample.ProtocolCheck;
import org.xtext.example.mydsl.myDslSample.RegExpMatch;
import org.xtext.example.mydsl.myDslSample.SecurityPolicy;
import org.xtext.example.mydsl.myDslSample.SecurityPolicyList;
import org.xtext.example.mydsl.myDslSample.SubCondition;
import org.xtext.example.mydsl.myDslSample.User;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslSampleGenerator implements IGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Defender> _filter = Iterables.<Defender>filter(_iterable, Defender.class);
    for (final Defender e : _filter) {
      {
        String _filename = e.getFilename();
        String _plus = (_filename + ".xml");
        CharSequence _compile_gen_xml_defender = this.compile_gen_xml_defender(e);
        fsa.generateFile(_plus, _compile_gen_xml_defender);
        CharSequence _compile_DefenderClass = this.compile_DefenderClass(e);
        fsa.generateFile(
          "jzombies/Defender.java", _compile_DefenderClass);
        CharSequence _compile_Connection = this.compile_Connection(e);
        fsa.generateFile(
          "jzombies/Connection.java", _compile_Connection);
        CharSequence _compile_HttpMethod = this.compile_HttpMethod(e);
        fsa.generateFile(
          "jzombies/HttpMethod.java", _compile_HttpMethod);
        CharSequence _compile_Protocol = this.compile_Protocol(e);
        fsa.generateFile(
          "jzombies/Protocol.java", _compile_Protocol);
        CharSequence _compile_Request = this.compile_Request(e);
        fsa.generateFile(
          "jzombies/Request.java", _compile_Request);
        CharSequence _compile_Human = this.compile_Human(e);
        fsa.generateFile(
          "jzombies/Human.java", _compile_Human);
        CharSequence _compile_Zombie = this.compile_Zombie(e);
        fsa.generateFile(
          "jzombies/Zombie.java", _compile_Zombie);
        CharSequence _compile_Condition = this.compile_Condition(e);
        fsa.generateFile(
          "jzombies/defender/Condition.java", _compile_Condition);
        CharSequence _compile_EndPoint = this.compile_EndPoint(e);
        fsa.generateFile(
          "jzombies/defender/EndPoint.java", _compile_EndPoint);
        CharSequence _compile_SecurityPolicy = this.compile_SecurityPolicy(e);
        fsa.generateFile(
          "jzombies/defender/SecurityPolicy.java", _compile_SecurityPolicy);
        CharSequence _compile_SecurityPolicyList = this.compile_SecurityPolicyList(e);
        fsa.generateFile(
          "jzombies/defender/SecurityPolicyList.java", _compile_SecurityPolicyList);
        CharSequence _compile_Action = this.compile_Action(e);
        fsa.generateFile(
          "jzombies/defender/action/Action.java", _compile_Action);
        CharSequence _compile_BlockSender = this.compile_BlockSender(e);
        fsa.generateFile(
          "jzombies/defender/action/BlockSender.java", _compile_BlockSender);
        CharSequence _compile_DropRequest = this.compile_DropRequest(e);
        fsa.generateFile(
          "jzombies/defender/action/DropRequest.java", _compile_DropRequest);
        CharSequence _compile_PassRequest = this.compile_PassRequest(e);
        fsa.generateFile(
          "jzombies/defender/action/PassRequst.java", _compile_PassRequest);
        CharSequence _compile_FrequencyCheck = this.compile_FrequencyCheck(e);
        fsa.generateFile(
          "jzombies/defender/condition/FrequencyCheck.java", _compile_FrequencyCheck);
        CharSequence _compile_HttpMethodCheck = this.compile_HttpMethodCheck(e);
        fsa.generateFile(
          "jzombies/defender/condition/HttpMethodCheck.java", _compile_HttpMethodCheck);
        CharSequence _compile_HttpParamLengthCheck = this.compile_HttpParamLengthCheck(e);
        fsa.generateFile(
          "jzombies/defender/condition/HttpParamLengthCheck.java", _compile_HttpParamLengthCheck);
        CharSequence _compile_HttpRegExpMatchCheck = this.compile_HttpRegExpMatchCheck(e);
        fsa.generateFile(
          "jzombies/defender/condition/HttpRegExpMatchCheck.java", _compile_HttpRegExpMatchCheck);
        CharSequence _compile_ProtocolCheck = this.compile_ProtocolCheck(e);
        fsa.generateFile(
          "jzombies/defender/condition/ProtocolCheck.java", _compile_ProtocolCheck);
        CharSequence _compile_SubCondition = this.compile_SubCondition(e);
        fsa.generateFile(
          "jzombies/defender/condition/SubCondition.java", _compile_SubCondition);
        CharSequence _compile_DefenderParser = this.compile_DefenderParser(e);
        fsa.generateFile(
          "jzombies/util/DefenderParser.java", _compile_DefenderParser);
        CharSequence _compile_HttpDataParser = this.compile_HttpDataParser(e);
        fsa.generateFile(
          "jzombies/util/HttpDataParser.java", _compile_HttpDataParser);
        CharSequence _compile_SecurityPolicyListParser = this.compile_SecurityPolicyListParser(e);
        fsa.generateFile(
          "jzombies/util/SecurityPolicyListParser.java", _compile_SecurityPolicyListParser);
      }
    }
    TreeIterator<EObject> _allContents_1 = resource.getAllContents();
    Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(_allContents_1);
    Iterable<User> _filter_1 = Iterables.<User>filter(_iterable_1, User.class);
    for (final User e_1 : _filter_1) {
      {
        CharSequence _compile_User = this.compile_User(e_1);
        fsa.generateFile(
          "jzombies/User.java", _compile_User);
        CharSequence _compile_UserAndAttackerParser = this.compile_UserAndAttackerParser(e_1);
        fsa.generateFile(
          "jzombies/util/UserAndAttackerParser.java", _compile_UserAndAttackerParser);
      }
    }
    TreeIterator<EObject> _allContents_2 = resource.getAllContents();
    Iterable<EObject> _iterable_2 = IteratorExtensions.<EObject>toIterable(_allContents_2);
    Iterable<Attacker> _filter_2 = Iterables.<Attacker>filter(_iterable_2, Attacker.class);
    for (final Attacker e_2 : _filter_2) {
      {
        CharSequence _compile_AttackerClass = this.compile_AttackerClass(e_2);
        fsa.generateFile(
          "jzombies/Attacker.java", _compile_AttackerClass);
        CharSequence _compile_UserAndAttackerParser = this.compile_UserAndAttackerParser(e_2);
        fsa.generateFile(
          "jzombies/util/UserAndAttackerParser.java", _compile_UserAndAttackerParser);
      }
    }
    CharSequence _compile_gen_xml_users = this.compile_gen_xml_users(resource);
    fsa.generateFile(
      "users.xml", _compile_gen_xml_users);
    TreeIterator<EObject> _allContents_3 = resource.getAllContents();
    Iterable<EObject> _iterable_3 = IteratorExtensions.<EObject>toIterable(_allContents_3);
    Iterable<Agent> _filter_3 = Iterables.<Agent>filter(_iterable_3, Agent.class);
    for (final Agent e_3 : _filter_3) {
      CharSequence _compile_AgentClass = this.compile_AgentClass(e_3);
      fsa.generateFile(
        "jzombies/Agent.java", _compile_AgentClass);
    }
  }
  
  public CharSequence compile(final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class {");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_gen_xml_users(final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("<!-- New XML document created with EditiX XML Editor (http://www.editix.com) at Thu Oct 29 21:15:45 CDT 2015 -->");
    _builder.newLine();
    _builder.newLine();
    _builder.append("<users>");
    _builder.newLine();
    {
      TreeIterator<EObject> _allContents = resource.getAllContents();
      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
      Iterable<Agent> _filter = Iterables.<Agent>filter(_iterable, Agent.class);
      for(final Agent e : _filter) {
        {
          boolean _or = false;
          if ((e instanceof User)) {
            _or = true;
          } else {
            _or = (e instanceof Attacker);
          }
          if (_or) {
            _builder.append("\t");
            _builder.append("<user name=\"");
            String _name = e.getName();
            _builder.append(_name, "\t");
            _builder.append("\" sourceIP=\"");
            IPAddress _source = e.getSource();
            int _byte1 = _source.getByte1();
            String _plus = (Integer.valueOf(_byte1) + ".");
            IPAddress _source_1 = e.getSource();
            int _byte2 = _source_1.getByte2();
            String _plus_1 = (_plus + Integer.valueOf(_byte2));
            String _plus_2 = (_plus_1 + ".");
            IPAddress _source_2 = e.getSource();
            int _byte3 = _source_2.getByte3();
            String _plus_3 = (_plus_2 + Integer.valueOf(_byte3));
            String _plus_4 = (_plus_3 + ".");
            IPAddress _source_3 = e.getSource();
            int _byte4 = _source_3.getByte4();
            String _plus_5 = (_plus_4 + Integer.valueOf(_byte4));
            _builder.append(_plus_5, "\t");
            _builder.append("\" type=\"");
            String _type = e.getType();
            _builder.append(_type, "\t");
            _builder.append("\">");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("<requestList>");
            _builder.newLine();
            {
              if ((e instanceof User)) {
                {
                  EList<NormalRequest> _requests = ((User) e).getRequests();
                  for(final NormalRequest req : _requests) {
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("<request>");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("<source>");
                    IPAddress _source_4 = req.getSource();
                    int _byte1_1 = _source_4.getByte1();
                    String _plus_6 = (Integer.valueOf(_byte1_1) + ".");
                    IPAddress _source_5 = req.getSource();
                    int _byte2_1 = _source_5.getByte2();
                    String _plus_7 = (_plus_6 + Integer.valueOf(_byte2_1));
                    String _plus_8 = (_plus_7 + ".");
                    IPAddress _source_6 = req.getSource();
                    int _byte3_1 = _source_6.getByte3();
                    String _plus_9 = (_plus_8 + Integer.valueOf(_byte3_1));
                    String _plus_10 = (_plus_9 + ".");
                    IPAddress _source_7 = req.getSource();
                    int _byte4_1 = _source_7.getByte4();
                    String _plus_11 = (_plus_10 + Integer.valueOf(_byte4_1));
                    _builder.append(_plus_11, "\t\t\t");
                    _builder.append("</source>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("<destination>");
                    IPAddress _destination = req.getDestination();
                    int _byte1_2 = _destination.getByte1();
                    String _plus_12 = (Integer.valueOf(_byte1_2) + ".");
                    IPAddress _destination_1 = req.getDestination();
                    int _byte2_2 = _destination_1.getByte2();
                    String _plus_13 = (_plus_12 + Integer.valueOf(_byte2_2));
                    String _plus_14 = (_plus_13 + ".");
                    IPAddress _destination_2 = req.getDestination();
                    int _byte3_2 = _destination_2.getByte3();
                    String _plus_15 = (_plus_14 + Integer.valueOf(_byte3_2));
                    String _plus_16 = (_plus_15 + ".");
                    IPAddress _destination_3 = req.getDestination();
                    int _byte4_2 = _destination_3.getByte4();
                    String _plus_17 = (_plus_16 + Integer.valueOf(_byte4_2));
                    _builder.append(_plus_17, "\t\t\t");
                    _builder.append("</destination>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("<protocol>");
                    Protocol _protocol = req.getProtocol();
                    String _name_1 = _protocol.name();
                    _builder.append(_name_1, "\t\t\t");
                    _builder.append("</protocol>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("<port>");
                    int _port = req.getPort();
                    _builder.append(_port, "\t\t\t");
                    _builder.append("</port>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("<data>");
                    String _data = req.getData();
                    String _replace = _data.replace("&", "&amp;");
                    _builder.append(_replace, "\t\t\t");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("</data>");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("</request>");
                    _builder.newLine();
                  }
                }
              }
            }
            _builder.append("\t");
            _builder.append("\t");
            _builder.newLine();
            {
              if ((e instanceof Attacker)) {
                {
                  EList<MaliciousRequest> _requests_1 = ((Attacker) e).getRequests();
                  for(final MaliciousRequest req_1 : _requests_1) {
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("<request>");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("<source>");
                    IPAddress _source_8 = req_1.getSource();
                    int _byte1_3 = _source_8.getByte1();
                    String _plus_18 = (Integer.valueOf(_byte1_3) + ".");
                    IPAddress _source_9 = req_1.getSource();
                    int _byte2_3 = _source_9.getByte2();
                    String _plus_19 = (_plus_18 + Integer.valueOf(_byte2_3));
                    String _plus_20 = (_plus_19 + ".");
                    IPAddress _source_10 = req_1.getSource();
                    int _byte3_3 = _source_10.getByte3();
                    String _plus_21 = (_plus_20 + Integer.valueOf(_byte3_3));
                    String _plus_22 = (_plus_21 + ".");
                    IPAddress _source_11 = req_1.getSource();
                    int _byte4_3 = _source_11.getByte4();
                    String _plus_23 = (_plus_22 + Integer.valueOf(_byte4_3));
                    _builder.append(_plus_23, "\t\t\t");
                    _builder.append("</source>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("<destination>");
                    IPAddress _destination_4 = req_1.getDestination();
                    int _byte1_4 = _destination_4.getByte1();
                    String _plus_24 = (Integer.valueOf(_byte1_4) + ".");
                    IPAddress _destination_5 = req_1.getDestination();
                    int _byte2_4 = _destination_5.getByte2();
                    String _plus_25 = (_plus_24 + Integer.valueOf(_byte2_4));
                    String _plus_26 = (_plus_25 + ".");
                    IPAddress _destination_6 = req_1.getDestination();
                    int _byte3_4 = _destination_6.getByte3();
                    String _plus_27 = (_plus_26 + Integer.valueOf(_byte3_4));
                    String _plus_28 = (_plus_27 + ".");
                    IPAddress _destination_7 = req_1.getDestination();
                    int _byte4_4 = _destination_7.getByte4();
                    String _plus_29 = (_plus_28 + Integer.valueOf(_byte4_4));
                    _builder.append(_plus_29, "\t\t\t");
                    _builder.append("</destination>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("<protocol>");
                    Protocol _protocol_1 = req_1.getProtocol();
                    String _name_2 = _protocol_1.name();
                    _builder.append(_name_2, "\t\t\t");
                    _builder.append("</protocol>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("<port>");
                    int _port_1 = req_1.getPort();
                    _builder.append(_port_1, "\t\t\t");
                    _builder.append("</port>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("<data>");
                    String _data_1 = req_1.getData();
                    String _replace_1 = _data_1.replace("&", "&amp;");
                    _builder.append(_replace_1, "\t\t\t");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("</data>");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("</request>");
                    _builder.newLine();
                  }
                }
              }
            }
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("</requestList>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("</user>");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("</users>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_gen_xml_defender(final Defender e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("<!-- New XML document created with EditiX XML Editor (http://www.editix.com) at Fri Oct 30 09:32:34 CDT 2015 -->");
    _builder.newLine();
    _builder.append("<defender name=\"");
    String _name = e.getName();
    _builder.append(_name, "");
    _builder.append("\" sourceIP=\"");
    IPAddress _source = e.getSource();
    _builder.append(_source, "");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t  ");
    _builder.append("<securityPolicyList>");
    _builder.newLine();
    _builder.append("\t\t  \t");
    CharSequence _compile_gen_xml_defender_securityPolicyList = this.compile_gen_xml_defender_securityPolicyList(e);
    _builder.append(_compile_gen_xml_defender_securityPolicyList, "\t\t  \t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t  ");
    _builder.append("</securityPolicyList>\t");
    _builder.newLine();
    _builder.append("</defender>\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_gen_xml_defender_securityPolicyList(final Defender e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    {
      SecurityPolicyList _securityPolicylist = e.getSecurityPolicylist();
      EList<SecurityPolicy> _securityPolicies = _securityPolicylist.getSecurityPolicies();
      for(final SecurityPolicy sp : _securityPolicies) {
        _builder.append("\t  \t\t");
        _builder.append("<securityPolicy name=\"");
        String _name = sp.getName();
        _builder.append(_name, "\t  \t\t");
        _builder.append("\">");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("<endpoint>");
        _builder.newLine();
        _builder.append("\t \t");
        _builder.append("<protocol>");
        EndPoint _endPoint = sp.getEndPoint();
        Protocol _protocol = _endPoint.getProtocol();
        String _name_1 = _protocol.name();
        _builder.append(_name_1, "\t \t");
        _builder.append("</protocol>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t \t");
        _builder.append("<port>");
        EndPoint _endPoint_1 = sp.getEndPoint();
        int _port = _endPoint_1.getPort();
        _builder.append(_port, "\t \t");
        _builder.append("</port>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t ");
        _builder.append("</endpoint>");
        _builder.newLine();
        _builder.append("\t ");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("<trueAction>");
        _builder.newLine();
        {
          EList<Action> _trueActionList = sp.getTrueActionList();
          for(final Action ac : _trueActionList) {
            _builder.append("\t\t");
            _builder.append("<action type=\"");
            String _action = ac.getAction();
            _builder.append(_action, "\t\t");
            _builder.append("\"/>");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("</trueAction>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("<falseAction>");
        _builder.newLine();
        {
          EList<Action> _falseActionList = sp.getFalseActionList();
          for(final Action ac_1 : _falseActionList) {
            _builder.append("\t\t");
            _builder.append("<action type=\"");
            String _action_1 = ac_1.getAction();
            _builder.append(_action_1, "\t\t");
            _builder.append("\"/>");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("</falseAction>");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("<policy>");
        _builder.newLine();
        {
          EList<Condition> _conditionlist = sp.getConditionlist();
          for(final Condition cond : _conditionlist) {
            _builder.append("\t\t");
            _builder.append("<condition name=\"");
            String _name_2 = cond.getName();
            _builder.append(_name_2, "\t\t");
            _builder.append("\" />");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t\t");
        _builder.append("<operationList>");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.newLine();
        {
          EList<String> _operationList = sp.getOperationList();
          for(final String operation : _operationList) {
            _builder.append("\t\t\t\t");
            _builder.append("<operator>");
            _builder.newLine();
            _builder.append("\t\t\t\t");
            _builder.append("\t");
            String _string = operation.toString();
            String _replaceAll = _string.replaceAll("&", "&amp;");
            _builder.append(_replaceAll, "\t\t\t\t\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t\t");
            _builder.append("</operator>");
            _builder.newLine();
          }
        }
        _builder.append("\t\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("</operationList>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("</policy>");
        _builder.newLine();
        _builder.append("</securityPolicy>");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.append("<conditionList>");
    _builder.newLine();
    {
      SecurityPolicyList _securityPolicylist_1 = e.getSecurityPolicylist();
      EList<Condition> _conditions = _securityPolicylist_1.getConditions();
      for(final Condition cond_1 : _conditions) {
        _builder.append("\t\t\t");
        _builder.append("<condition name=\"");
        String _name_3 = cond_1.getName();
        _builder.append(_name_3, "\t\t\t");
        _builder.append("\">");
        _builder.newLineIfNotEmpty();
        {
          EList<SubCondition> _subConditionList = cond_1.getSubConditionList();
          for(final SubCondition subCond : _subConditionList) {
            _builder.append("\t\t\t");
            _builder.append("\t");
            _builder.append("<subcondition name=\"");
            String _name_4 = subCond.getName();
            _builder.append(_name_4, "\t\t\t\t");
            _builder.append("\">");
            _builder.newLineIfNotEmpty();
            {
              if ((subCond instanceof ProtocolCheck)) {
                _builder.append("\t\t\t");
                _builder.append("\t");
                _builder.append("\t");
                Protocol _value = ((ProtocolCheck) subCond).getValue();
                String _name_5 = _value.name();
                _builder.append(_name_5, "\t\t\t\t\t");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              if ((subCond instanceof HTTPMethodCheck)) {
                _builder.append("\t\t\t");
                _builder.append("\t");
                _builder.append("\t");
                String _value_1 = ((HTTPMethodCheck) subCond).getValue();
                _builder.append(_value_1, "\t\t\t\t\t");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              if ((subCond instanceof RegExpMatch)) {
                _builder.append("\t\t\t");
                _builder.append("\t");
                _builder.append("\t");
                String _value_2 = ((RegExpMatch) subCond).getValue();
                _builder.append(_value_2, "\t\t\t\t\t");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              if ((subCond instanceof FrequencyCheck)) {
                _builder.append("\t\t\t");
                _builder.append("\t");
                _builder.append("\t");
                int _value_3 = ((FrequencyCheck) subCond).getValue();
                _builder.append(_value_3, "\t\t\t\t\t");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              if ((subCond instanceof HTTPParamLenCheck)) {
                _builder.append("\t\t\t");
                _builder.append("\t");
                _builder.append("\t");
                int _value_4 = ((HTTPParamLenCheck) subCond).getValue();
                _builder.append(_value_4, "\t\t\t\t\t");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t\t\t");
            _builder.append("\t");
            _builder.append("</subcondition>");
            _builder.newLine();
          }
        }
        _builder.append("\t\t\t");
        _builder.append("</condition>");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.append("</conditionList>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_AttackerClass(final Agent e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package jzombies;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import repast.simphony.engine.schedule.ScheduledMethod;");
    _builder.newLine();
    _builder.append("import repast.simphony.space.continuous.ContinuousSpace;");
    _builder.newLine();
    _builder.append("import repast.simphony.space.grid.Grid;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/***");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This class is a subclass of ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Agent class that represents an attacker");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* who sends malicious requests to the defender");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class Attacker extends Agent {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ContinuousSpace<Object> space;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Grid<Object> grid;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ArrayList<Request> listOfRequests;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Defender defender;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int sentCounter = 0;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/***");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param space is ContinuousSpace");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param grid is Grid");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param sourceIP is ip address of the Attacker");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Attacker(ContinuousSpace<Object> space, Grid<Object> grid, String sourceIP ) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super(sourceIP);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.space = space;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.grid = grid;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("listOfRequests=new ArrayList<Request>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This is the step behavior.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* step here you can check your variables for statistics.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Schedule the step method for agents.  ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* The method is scheduled starting at tick one with an interval of 1 tick.  ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Specifically, the step starts at 1, and");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* and recurs at 1,2,3,...etc. This method also helps to simulate sending request. ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@ScheduledMethod(start=1,interval=1)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void step() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(sentCounter < listOfRequests.size()){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("send(listOfRequests.get(sentCounter++));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void send(Request request) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("defender.receive(request);\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void receive(Request request) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void connect(Agent agent) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("defender = (Defender) agent;\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("agent.connect(this);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/***");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This function will add the attacker request");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* into the sending list.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param req is Request");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addRequest(Request req){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("listOfRequests.add(req);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_AgentClass(final Agent e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package jzombies;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*This class represents the base for");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*all the agents; user, defender, and attacker. ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public abstract class Agent implements Connection {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected String sourceIP;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/***");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Parameterized constructor");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param sourceIP is the agent\'s ip address");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Agent(String sourceIP) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.sourceIP=sourceIP;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getSourceIP(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return sourceIP;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_DefenderClass(final Agent e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.append("package jzombies;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import jzombies.defender.SecurityPolicyList;");
    _builder.newLine();
    _builder.append("import jzombies.defender.action.Action;");
    _builder.newLine();
    _builder.append("import repast.simphony.engine.watcher.Watch;");
    _builder.newLine();
    _builder.append("import repast.simphony.engine.watcher.WatcherTriggerSchedule;");
    _builder.newLine();
    _builder.append("import repast.simphony.space.continuous.ContinuousSpace;");
    _builder.newLine();
    _builder.append("import repast.simphony.space.grid.Grid;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("/***");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This class is a subclass of ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Agent class that represents a defender");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* who receives the request from user and attacker,");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* and verifies request against the security policies and");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* take the appropriate action. ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Defender extends Agent{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ContinuousSpace<Object> space;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Grid<Object> grid;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private boolean moved;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ArrayList<Agent> connections;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("SecurityPolicyList securityPolicList;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/***");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param space is ContinuousSpace");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param grid is Grid");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param sourceIP is ip address of the defender");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Defender(ContinuousSpace<Object> space, Grid<Object> grid, String sourceIP) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super(sourceIP);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("connections = new ArrayList<Agent>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.space = space;\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.grid = grid;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Watch(watcheeClassName = \"jzombies.Zombie\", watcheeFieldNames = \"moved\", ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("query = \"within_vn 1\", whenToTrigger = WatcherTriggerSchedule.IMMEDIATE)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void run() {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/***");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This function will set the security policy list");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* into the defender.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param secpls is SecurityPolicyList");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setSecurityPolicyList(SecurityPolicyList secpls){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.securityPolicList = secpls; ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void connect(Agent agent) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("connections.add(agent);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void send(Request request) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (Agent agent : connections) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(agent.getSourceIP() == request.getSourceIP()){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("agent.receive(request);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void receive(Request request) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ArrayList<Action> actions = securityPolicList.verify(request);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (Action action : actions) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("action.execute(request);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_Connection(final Agent e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package jzombies;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("/***");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This is an interface that helps to ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* make the connection between the agents. ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public interface Connection {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/***");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This function will connect the source agent ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* to defender.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param agent is Agent ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void connect(Agent agent);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/***");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This function will send the request ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* from the sender agent to defender.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param request");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void send(Request request);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/***");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This function will receive the response ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* from the defender.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param request");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void receive(Request request);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_HttpMethod(final Agent e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package jzombies;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/***");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This is an enumeration for Http Methods");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* that represents a method which can be either");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* GET,POST,HEAD,DELETE,PUT ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public enum HttpMethod {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("GET,POST,HEAD,DELETE,PUT");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_Builder(final Agent e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package jzombies;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.xml.parsers.ParserConfigurationException;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.xml.sax.SAXException;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import jzombies.util.DefenderParser;");
    _builder.newLine();
    _builder.append("import jzombies.util.UserAndAttackerParser;");
    _builder.newLine();
    _builder.append("import repast.simphony.context.Context;");
    _builder.newLine();
    _builder.append("import repast.simphony.context.space.continuous.ContinuousSpaceFactory;");
    _builder.newLine();
    _builder.append("import repast.simphony.context.space.continuous.ContinuousSpaceFactoryFinder;");
    _builder.newLine();
    _builder.append("import repast.simphony.context.space.graph.NetworkBuilder;");
    _builder.newLine();
    _builder.append("import repast.simphony.context.space.grid.GridFactory;");
    _builder.newLine();
    _builder.append("import repast.simphony.context.space.grid.GridFactoryFinder;");
    _builder.newLine();
    _builder.append("import repast.simphony.dataLoader.ContextBuilder;");
    _builder.newLine();
    _builder.append("import repast.simphony.engine.environment.RunEnvironment;");
    _builder.newLine();
    _builder.append("import repast.simphony.parameter.Parameters;");
    _builder.newLine();
    _builder.append("import repast.simphony.space.continuous.ContinuousSpace;");
    _builder.newLine();
    _builder.append("import repast.simphony.space.continuous.NdPoint;");
    _builder.newLine();
    _builder.append("import repast.simphony.space.continuous.RandomCartesianAdder;");
    _builder.newLine();
    _builder.append("import repast.simphony.space.graph.Network;");
    _builder.newLine();
    _builder.append("import repast.simphony.space.grid.Grid;");
    _builder.newLine();
    _builder.append("import repast.simphony.space.grid.GridBuilderParameters;");
    _builder.newLine();
    _builder.append("import repast.simphony.space.grid.SimpleGridAdder;");
    _builder.newLine();
    _builder.append("import repast.simphony.space.grid.WrapAroundBorders;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class JZombiesBuilder implements ContextBuilder<Object> {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* (non-Javadoc)");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @see");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* repast.simphony.dataLoader.ContextBuilder#build(repast.simphony.context");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* .Context)");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Context build(Context<Object> context) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("context.setId(\"jzombies\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("NetworkBuilder<Object> netBuilder = new NetworkBuilder<Object>(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("\"infection network\", context, false);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("netBuilder.buildNetwork();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ContinuousSpaceFactory spaceFactory = ContinuousSpaceFactoryFinder");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".createContinuousSpaceFactory(null);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ContinuousSpace<Object> space = spaceFactory.createContinuousSpace(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("\"space\", context, new RandomCartesianAdder<Object>(),");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("new repast.simphony.space.continuous.WrapAroundBorders(), 50,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("50);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("GridFactory gridFactory = GridFactoryFinder.createGridFactory(null);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Grid<Object> grid = gridFactory.createGrid(\"grid\", context,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("new GridBuilderParameters<Object>(new WrapAroundBorders(),");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("new SimpleGridAdder<Object>(), true, 50, 50));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Network<Object> net = (Network<Object>)context.getProjection(\"infection network\"); ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Parameters params = RunEnvironment.getInstance().getParameters();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("DefenderParser def= new DefenderParser();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Defender defender;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("defender = def.parseDefender(space, grid);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("context.add(defender);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("UserAndAttackerParser users= new UserAndAttackerParser();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ArrayList<Agent> agentsList = new ArrayList<Agent>();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("agentsList=users.parseUsers(space, grid);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} catch (ParserConfigurationException | SAXException | IOException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (Agent agent : agentsList) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(agent instanceof User){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("net.addEdge(agent, defender);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("agent.connect(defender);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("context.add(agent);\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("net.addEdge(agent,defender);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("agent.connect(defender);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("context.add(agent);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (ParserConfigurationException | SAXException | IOException e1) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e1.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (Object obj : context) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("NdPoint pt = space.getLocation(obj);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("grid.moveTo(obj, (int) pt.getX(), (int) pt.getY());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (RunEnvironment.getInstance().isBatch()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("RunEnvironment.getInstance().endAt(20);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return context;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_Protocol(final Agent e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package jzombies;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("/***");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This is an enumeration for Protocols");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* that represents a protocol which can be either");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* HTTP, HTTPS, FTP, SSH");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public enum Protocol {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("HTTP(80), HTTPS(443), FTP(21) , SSH(22);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private int protocol;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Protocol(int s) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protocol = s;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int getStatusCode() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return protocol;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_Request(final Agent e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package jzombies;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/***");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This class is a simple TCP request ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class Request {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String sourceIP;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String destinationIP;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int port;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String data;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Protocol protocol;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/***");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param sourceIP is sender ip address");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param destinationIP destination ip address");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param port is port number used by this request. ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param data is the message carried by this request");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param protocol is the protocol used by this request. ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Request(String sourceIP, String destinationIP, int port,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String data, Protocol protocol) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.sourceIP = sourceIP;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.destinationIP = destinationIP;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.port = port;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.data = data;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.protocol = protocol;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getSourceIP(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return sourceIP;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getDestinationIP() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return destinationIP;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setDestinationIP(String destinationIP) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.destinationIP = destinationIP;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int getPort() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return port;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setPort(int port) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.port = port;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getData() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return data;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setData(String data) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.data = data;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Protocol getProtocol() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return protocol;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setProtocol(Protocol protocol) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.protocol = protocol;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setSourceIP(String sourceIP) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.sourceIP = sourceIP;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_User(final Agent e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package jzombies;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import repast.simphony.engine.schedule.ScheduledMethod;");
    _builder.newLine();
    _builder.append("import repast.simphony.space.continuous.ContinuousSpace;");
    _builder.newLine();
    _builder.append("import repast.simphony.space.grid.Grid;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("/***");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This class is a subclass of ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Agent class that represents a user");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* who sends normal requests to the defender");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class User extends Agent {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ContinuousSpace<Object> space;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Grid<Object> grid;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Defender defender;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ArrayList<Request> listOfRequests;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int sentCounter = 0;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/***");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param space is ContinuousSpace");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param grid is Grid");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param sourceIP is ip address of the user");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public User(ContinuousSpace<Object> space, Grid<Object> grid, String sourceIP) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super(sourceIP);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.space = space;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.grid = grid;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("listOfRequests=new ArrayList<Request>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This is the step behavior.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* step here you can check your variables for statistics.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Schedule the step method for agents.  ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* The method is scheduled starting at tick one with an interval of 1 tick.  ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Specifically, the step starts at 1, and");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* and recurs at 1,2,3,...etc. This method also helps to simulate sending request. ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@ScheduledMethod(start=1,interval=1)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void step() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(sentCounter < listOfRequests.size()){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("send(listOfRequests.get(sentCounter++));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void send(Request request) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("defender.receive(request);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void receive(Request request) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void connect(Agent agent) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("defender = (Defender) agent;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("agent.connect(this);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/***");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This function will add the user request");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* into the sending list.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param req is Request");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addRequest(Request req){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("listOfRequests.add(req);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_Human(final Agent e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package jzombies;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import repast.simphony.engine.watcher.Watch;");
    _builder.newLine();
    _builder.append("import repast.simphony.engine.watcher.WatcherTriggerSchedule;");
    _builder.newLine();
    _builder.append("import repast.simphony.query.space.grid.GridCell;");
    _builder.newLine();
    _builder.append("import repast.simphony.query.space.grid.GridCellNgh;");
    _builder.newLine();
    _builder.append("import repast.simphony.random.RandomHelper;");
    _builder.newLine();
    _builder.append("import repast.simphony.space.SpatialMath;");
    _builder.newLine();
    _builder.append("import repast.simphony.space.continuous.ContinuousSpace;");
    _builder.newLine();
    _builder.append("import repast.simphony.space.continuous.NdPoint;");
    _builder.newLine();
    _builder.append("import repast.simphony.space.grid.Grid;");
    _builder.newLine();
    _builder.append("import repast.simphony.space.grid.GridPoint;");
    _builder.newLine();
    _builder.append("import repast.simphony.util.SimUtilities;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @author nick");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class Human {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ContinuousSpace<Object> space;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Grid<Object> grid;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private int energy, startingEnergy;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Human(ContinuousSpace<Object> space, Grid<Object> grid, int energy) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.space = space;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.grid = grid;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.energy = startingEnergy = energy;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Watch(watcheeClassName = \"jzombies.Zombie\", watcheeFieldNames = \"moved\", ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("query = \"within_vn 1\", whenToTrigger = WatcherTriggerSchedule.IMMEDIATE)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void run() {");
    _builder.newLine();
    _builder.append("//\t\t// get the grid location of this Human");
    _builder.newLine();
    _builder.append("//\t\tGridPoint pt = grid.getLocation(this);");
    _builder.newLine();
    _builder.append("//");
    _builder.newLine();
    _builder.append("//\t\t// use the GridCellNgh class to create GridCells for");
    _builder.newLine();
    _builder.append("//\t\t// the surrounding neighborhood.");
    _builder.newLine();
    _builder.append("//\t\tGridCellNgh<Zombie> nghCreator = new GridCellNgh<Zombie>(grid, pt,");
    _builder.newLine();
    _builder.append("//\t\t\t\tZombie.class, 1, 1);");
    _builder.newLine();
    _builder.append("//\t\tList<GridCell<Zombie>> gridCells = nghCreator.getNeighborhood(true);");
    _builder.newLine();
    _builder.append("//\t\tSimUtilities.shuffle(gridCells, RandomHelper.getUniform());");
    _builder.newLine();
    _builder.append("//");
    _builder.newLine();
    _builder.append("//\t\tGridPoint pointWithLeastZombies = null;");
    _builder.newLine();
    _builder.append("//\t\tint minCount = Integer.MAX_VALUE;");
    _builder.newLine();
    _builder.append("//\t\tfor (GridCell<Zombie> cell : gridCells) {");
    _builder.newLine();
    _builder.append("//\t\t\tif (cell.size() < minCount) {");
    _builder.newLine();
    _builder.append("//\t\t\t\tpointWithLeastZombies = cell.getPoint();");
    _builder.newLine();
    _builder.append("//\t\t\t\tminCount = cell.size();");
    _builder.newLine();
    _builder.append("//\t\t\t}");
    _builder.newLine();
    _builder.append("//\t\t}");
    _builder.newLine();
    _builder.append("//\t\t");
    _builder.newLine();
    _builder.append("//\t\tif (energy > 0) {");
    _builder.newLine();
    _builder.append("//\t\t\tmoveTowards(pointWithLeastZombies);");
    _builder.newLine();
    _builder.append("//\t\t} else {");
    _builder.newLine();
    _builder.append("//\t\t\tenergy = startingEnergy;");
    _builder.newLine();
    _builder.append("//\t\t}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void moveTowards(GridPoint pt) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// only move if we are not already in this grid location");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (!pt.equals(grid.getLocation(this))) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("NdPoint myPoint = space.getLocation(this);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("NdPoint otherPoint = new NdPoint(pt.getX(), pt.getY());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("double angle = SpatialMath.calcAngleFor2DMovement(space, myPoint, otherPoint);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("space.moveByVector(this, 2, angle, 0);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("myPoint = space.getLocation(this);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("grid.moveTo(this, (int)myPoint.getX(), (int)myPoint.getY());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//energy--;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_Zombie(final Agent e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("package jzombies;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import repast.simphony.context.Context;");
    _builder.newLine();
    _builder.append("import repast.simphony.engine.schedule.ScheduledMethod;");
    _builder.newLine();
    _builder.append("import repast.simphony.random.RandomHelper;");
    _builder.newLine();
    _builder.append("import repast.simphony.space.SpatialMath;");
    _builder.newLine();
    _builder.append("import repast.simphony.space.continuous.ContinuousSpace;");
    _builder.newLine();
    _builder.append("import repast.simphony.space.continuous.NdPoint;");
    _builder.newLine();
    _builder.append("import repast.simphony.space.graph.Network;");
    _builder.newLine();
    _builder.append("import repast.simphony.space.grid.Grid;");
    _builder.newLine();
    _builder.append("import repast.simphony.space.grid.GridPoint;");
    _builder.newLine();
    _builder.append("import repast.simphony.util.ContextUtils;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @author nick");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class Zombie {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ContinuousSpace<Object> space;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Grid<Object> grid;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private boolean moved;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Zombie(ContinuousSpace<Object> space, Grid<Object> grid) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.space = space;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.grid = grid;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@ScheduledMethod(start = 1, interval = 1)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void step() {");
    _builder.newLine();
    _builder.append("//\t\t// get the grid location of this Zombie");
    _builder.newLine();
    _builder.append("//\t\tGridPoint pt = grid.getLocation(this);");
    _builder.newLine();
    _builder.append("//");
    _builder.newLine();
    _builder.append("//\t\t// use the GridCellNgh class to create GridCells for");
    _builder.newLine();
    _builder.append("//\t\t// the surrounding neighborhood.");
    _builder.newLine();
    _builder.append("//\t\tGridCellNgh<Human> nghCreator = new GridCellNgh<Human>(grid, pt,");
    _builder.newLine();
    _builder.append("//\t\t\t\tHuman.class, 1, 1);");
    _builder.newLine();
    _builder.append("//\t\tList<GridCell<Human>> gridCells = nghCreator.getNeighborhood(true);");
    _builder.newLine();
    _builder.append("//\t\tSimUtilities.shuffle(gridCells, RandomHelper.getUniform());");
    _builder.newLine();
    _builder.append("//");
    _builder.newLine();
    _builder.append("//\t\tGridPoint pointWithMostHumans = null;");
    _builder.newLine();
    _builder.append("//\t\tint maxCount = -1;");
    _builder.newLine();
    _builder.append("//\t\tfor (GridCell<Human> cell : gridCells) {");
    _builder.newLine();
    _builder.append("//\t\t\tif (cell.size() > maxCount) {");
    _builder.newLine();
    _builder.append("//\t\t\t\tpointWithMostHumans = cell.getPoint();");
    _builder.newLine();
    _builder.append("//\t\t\t\tmaxCount = cell.size();");
    _builder.newLine();
    _builder.append("//\t\t\t}");
    _builder.newLine();
    _builder.append("//\t\t}");
    _builder.newLine();
    _builder.append("//\t\tmoveTowards(pointWithMostHumans);");
    _builder.newLine();
    _builder.append("//\t\tinfect();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void moveTowards(GridPoint pt) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// only move if we are not already in this grid location");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (!pt.equals(grid.getLocation(this))) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("NdPoint myPoint = space.getLocation(this);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("NdPoint otherPoint = new NdPoint(pt.getX(), pt.getY());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("double angle = SpatialMath.calcAngleFor2DMovement(space, myPoint,");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("otherPoint);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("space.moveByVector(this, 1, angle, 0);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("myPoint = space.getLocation(this);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("grid.moveTo(this, (int) myPoint.getX(), (int) myPoint.getY());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("moved = true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void infect() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("GridPoint pt = grid.getLocation(this);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<Object> humans = new ArrayList<Object>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (Object obj : grid.getObjectsAt(pt.getX(), pt.getY())) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (obj instanceof Human) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("humans.add(obj);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (humans.size() > 0) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int index = RandomHelper.nextIntFromTo(0, humans.size() - 1);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Object obj = humans.get(index);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("NdPoint spacePt = space.getLocation(obj);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Context<Object> context = ContextUtils.getContext(obj);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("context.remove(obj);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Zombie zombie = new Zombie(space, grid);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("context.add(zombie);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("space.moveTo(zombie, spacePt.getX(), spacePt.getY());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("grid.moveTo(zombie, pt.getX(), pt.getY());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Network<Object> net = (Network<Object>)context.getProjection(\"infection network\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("net.addEdge(this, zombie);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_Condition(final Agent e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package jzombies.defender;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import jzombies.Request;");
    _builder.newLine();
    _builder.append("import jzombies.defender.condition.SubCondition;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("/***");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This class is a core components for building ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* security policies which compose of one or more subconditions");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class Condition {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ArrayList<SubCondition> subConditions;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Condition(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.subConditions= new ArrayList<SubCondition> ();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ArrayList<SubCondition> getCondition() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return subConditions;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setSubCondition(ArrayList<SubCondition> scondition) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.subConditions = scondition;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("/***");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This method helps to add the subconditions for the corresponding condition. ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param cond is SubCondition");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addSubCondition(SubCondition cond){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("subConditions.add(cond);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/***");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This function will check all the subconditions");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* and return the result of them. ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param r is Resulst");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return boolean variable : true or false ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean getResultsOfAllSubConditions(Request r){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("boolean results = true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (SubCondition scondition : subConditions) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("results &= scondition.check(r);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return results;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_EndPoint(final Agent e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package jzombies.defender;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import jzombies.Protocol;");
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* End point represent a port and protocol ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @author User-Zero");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class EndPoint {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int port;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Enum<Protocol> protocol;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int getPort() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return port;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setPort(int port) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.port = port;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Enum<Protocol> getProtocol() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return protocol;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setProtocol(Enum<Protocol> protocol) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.protocol = protocol;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_SecurityPolicy(final Agent e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package jzombies.defender;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import jzombies.Request;");
    _builder.newLine();
    _builder.append("import jzombies.defender.action.Action;");
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Security policy represent a rule that enforced on the incoming requests ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* for a specific end point.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @author User-Zero");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class SecurityPolicy {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("EndPoint endPoint;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String policy;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ArrayList<Condition> conditionList;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ArrayList<String> operationList;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ArrayList<Action> truePortionActionList;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ArrayList<Action> falsePortionActionList;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Parameterized constructor ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param endPoint The end point that this security policy will be ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* enforced on. ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param truePortionActionList The action(s) in case the request met");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*  the security policy.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param falsePortionActionList The action(s) in case the request ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*  doesn\'t meet the security policy.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public SecurityPolicy(EndPoint endPoint,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ArrayList<Action> truePortionActionList,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ArrayList<Action> falsePortionActionList) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.endPoint = endPoint;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.truePortionActionList = truePortionActionList;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.falsePortionActionList = falsePortionActionList;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("conditionList= new ArrayList<Condition>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public EndPoint getEndPoint() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return endPoint;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setEndPoint(EndPoint endPoint) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.endPoint = endPoint;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getPolicy() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return policy;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setPolicy(String policy) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.policy = policy;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<Condition> getCondition() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return conditionList;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setConditon(ArrayList<Condition> condition) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.conditionList = condition;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Using this function you can create security rule with multiple ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* conditions, but you have to send list of operations in case more");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* than one condition get used. ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param condition Condition");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addCondition(Condition condition) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.conditionList.add(condition);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This function will verify it certain request meet a security policy");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param req In coming request");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return return True if the request met the rule(s) otherwise false.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ArrayList<Action> enforce(Request req) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("boolean result = true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/*if(req.getProtocol() != endPoint.getProtocol() || req.getPort() != endPoint.getPort())");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return new ArrayList<Action>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (operationList.size() > 0) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("result = conditionList.get(0).getResultsOfAllSubConditions(req);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (int i = 1; i < conditionList.size(); i++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (operationList.get(i - 1).contains(\"&\")) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("result &= conditionList.get(i)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append(".getResultsOfAllSubConditions(req);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("result |= conditionList.get(i)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append(".getResultsOfAllSubConditions(req);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("result = conditionList.get(0).getResultsOfAllSubConditions(req);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return result ? truePortionActionList : falsePortionActionList;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* In case of multiple conditions, list of the operators must be given ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param op List of operators [&amp; or |]");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setOperationList(ArrayList<String> op) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.operationList = op;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_SecurityPolicyList(final Agent e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package jzombies.defender;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.xml.parsers.ParserConfigurationException;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.xml.sax.SAXException;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import jzombies.Protocol;");
    _builder.newLine();
    _builder.append("import jzombies.Request;");
    _builder.newLine();
    _builder.append("import jzombies.defender.action.Action;");
    _builder.newLine();
    _builder.append("import jzombies.defender.action.BlockSender;");
    _builder.newLine();
    _builder.append("import jzombies.defender.action.DropRequest;");
    _builder.newLine();
    _builder.append("import jzombies.defender.action.PassRequst;");
    _builder.newLine();
    _builder.append("import jzombies.defender.condition.SubCondition;");
    _builder.newLine();
    _builder.append("import jzombies.defender.condition.ProtocolCheck;");
    _builder.newLine();
    _builder.append("import jzombies.util.SecurityPolicyListParser;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Represent core component for the defender class, this class will contain ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* all the security policies and conditions used in the defender to be enforced");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* on the incoming requests.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @author User-Zero");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class SecurityPolicyList {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("List<SecurityPolicy> securityPolicyList;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("List<Condition>  conditionSubList;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public SecurityPolicyList(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("securityPolicyList = new ArrayList<SecurityPolicy>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("conditionSubList = new ArrayList<Condition>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//buildSecurityPolicyList();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<SecurityPolicy> getSecurityPolicy() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return securityPolicyList;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setSecurityPolicy(List<SecurityPolicy> securityPolicy) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.securityPolicyList = securityPolicy;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<Condition> getBehavior() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return conditionSubList;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setConditions(List<Condition> condition) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.conditionSubList = condition;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addSecurityPolicy(SecurityPolicy sp) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("securityPolicyList.add(sp);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This method will make a call to defender xml file parser");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* It will get the security policies and insert it into");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* security policy list. In other words, this method will help to ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* build the security policy list for this project.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void buildSecurityPolicyList(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This function will verify if the incoming request meet all ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* security policies enforced on the same end point. ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param r incoming request");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return True if request meet all the security policies otherwise false.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ArrayList<Action> verify(Request r){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ArrayList<Action> list = new ArrayList<Action>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ArrayList<Action> temp ;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (SecurityPolicy securityPolicy : securityPolicyList) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("temp = securityPolicy.enforce(r);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (Action action : temp) {// check this out");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(!list.contains(action)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if(action instanceof DropRequest || action instanceof BlockSender){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("list.remove(new PassRequst());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("list.add(action);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if(!list.contains(new BlockSender()) && !list.contains(new DropRequest()) )");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("list.add(action);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return list;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_Action(final Agent e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package jzombies.defender.action;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import jzombies.Request;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This Class defined the action that will be fired in case the incoming");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* request meet or violate security policy ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @author User-Zero");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public abstract class  Action {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public abstract void execute(Request r);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("public abstract boolean equals(Object obj);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_BlockSender(final Agent e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package jzombies.defender.action;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import jzombies.Request;");
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This action will block the sender and prevent any other incoming requests ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* from the same sender. ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @author User-Zero");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class BlockSender extends Action{");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execute(Request r) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"Defender: Blocked incoming request from \" +r.getSourceIP());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean equals(Object obj) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(obj instanceof BlockSender)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_DropRequest(final Agent e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t\t");
    _builder.append("package jzombies.defender.action;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("import jzombies.Request;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* This action will drop the incoming request and send error code to the ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* sender.");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @author User-Zero");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public class DropRequest extends Action{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("public void execute(Request r) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.println(\"Defender: Dropped incoming request from \" +r.getSourceIP());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("public boolean equals(Object obj) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(obj instanceof DropRequest)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_PassRequest(final Agent e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package jzombies.defender.action;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import jzombies.Request;");
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This action will allow the incoming request to reach it\'s destination. ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @author User-Zero");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class PassRequst extends Action{");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execute(Request r) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"Defender: Passed incoming request from \" +r.getSourceIP());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean equals(Object obj) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(obj instanceof PassRequst)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_FrequencyCheck(final Agent e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package jzombies.defender.condition;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.append("import java.util.Timer;");
    _builder.newLine();
    _builder.append("import java.util.TimerTask;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import jzombies.Request;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This class will verify if the number of requests per user");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* less than certain number within one second.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @author User-Zero");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class FrequencyCheck extends SubCondition{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int maxNumberOfReqests;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Object mylock;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("HashMap<String,Integer> reqCounter; ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param maxNumberOfReqests The maximum number of requests per ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* user within one second.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public FrequencyCheck(int maxNumberOfReqests) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated constructor stub");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("mylock = new Object();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("reqCounter = new HashMap<String,Integer>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.maxNumberOfReqests = maxNumberOfReqests;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Timer timer = new Timer();  //At this line a new Thread will be created");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("timer.schedule(new ScheduledTask(mylock,reqCounter), 1000); //delay in milliseconds");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public class ScheduledTask extends TimerTask {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Object mylock;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HashMap<String, Integer> reqCounter;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public ScheduledTask(Object mylock, HashMap<String, Integer> reqCounter ) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated constructor stub");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.mylock = mylock;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.reqCounter = reqCounter;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public void run() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("synchronized (mylock) {\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("reqCounter.clear();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean check(Request r) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("synchronized (mylock) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(reqCounter.containsKey(r.getSourceIP())){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("int numberOfReq = reqCounter.get(r.getSourceIP());");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(numberOfReq >= maxNumberOfReqests | numberOfReq+1 >= maxNumberOfReqests)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("reqCounter.put(r.getSourceIP(), ++numberOfReq);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}else");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("reqCounter.put(r.getSourceIP(),1);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_HttpMethodCheck(final Agent e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package jzombies.defender.condition;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import jzombies.HttpMethod;");
    _builder.newLine();
    _builder.append("import jzombies.Request;");
    _builder.newLine();
    _builder.append("import jzombies.util.HttpDataParser;");
    _builder.newLine();
    _builder.append("import jzombies.util.HttpDataParser.HttpData;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This class will check the method used in http request if it match ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* certain method or not.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @author User-Zero");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class HttpMethodCheck extends SubCondition{");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("HttpMethod httpMethod;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param method Http Method it can be [GET,POST,HEAD,PUT,DELETE]");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public HttpMethodCheck(HttpMethod method) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated constructor stub");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.httpMethod = method;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean check(Request r) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HttpDataParser d = new HttpDataParser();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HttpData dd = d.parse(r.getData());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HttpMethod httpMethod2 = dd.getMethod();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(httpMethod2 == this.httpMethod)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_HttpParamLengthCheck(final Agent e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package jzombies.defender.condition;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.Iterator;");
    _builder.newLine();
    _builder.append("import java.util.Map;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import jzombies.Request;");
    _builder.newLine();
    _builder.append("import jzombies.util.HttpDataParser;");
    _builder.newLine();
    _builder.append("import jzombies.util.HttpDataParser.HttpData;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This Class will check the length of the parameter(s) in a http request");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* if they are less or greater or equals to a certain length");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @author User-Zero");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class HttpParamLengthCheck extends SubCondition {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("OpCode oc;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int size;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param opc Operation code [lessThan or greaterThan or equalsTo]");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param size length ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public HttpParamLengthCheck(OpCode opc, int size){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.oc = opc;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.size = size;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public enum OpCode{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LessThan,");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("GreaterThan,");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("EqualsTo");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean check(Request r) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HttpDataParser d = new HttpDataParser();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HttpData dd = d.parse(r.getData());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("Iterator it = dd.getParam().entrySet().iterator();");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("while (it.hasNext()) {");
    _builder.newLine();
    _builder.append("\t\t     ");
    _builder.append("Map.Entry pair = (Map.Entry)it.next();");
    _builder.newLine();
    _builder.append("\t\t     ");
    _builder.append("int ca = ((String) pair.getValue()).length();");
    _builder.newLine();
    _builder.append("\t\t     ");
    _builder.newLine();
    _builder.append("\t\t     ");
    _builder.append("switch(oc){");
    _builder.newLine();
    _builder.append("\t\t     ");
    _builder.append("case EqualsTo: ");
    _builder.newLine();
    _builder.append("\t\t    \t ");
    _builder.append("if( ca == size) break;");
    _builder.newLine();
    _builder.append("\t\t    \t ");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t    \t\t ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t\t     ");
    _builder.append("case LessThan: ");
    _builder.newLine();
    _builder.append("\t\t    \t ");
    _builder.append("if ( ca  < size ) break;");
    _builder.newLine();
    _builder.append("\t\t    \t ");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t    \t\t ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t\t     ");
    _builder.append("case GreaterThan:");
    _builder.newLine();
    _builder.append("\t\t    \t ");
    _builder.append("if( ca  > size ) break ;");
    _builder.newLine();
    _builder.append("\t\t    \t ");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t    \t\t ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t\t     ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t     ");
    _builder.newLine();
    _builder.append("\t\t     ");
    _builder.append("it.remove(); // avoids a ConcurrentModificationException");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_HttpRegExpMatchCheck(final Agent e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package jzombies.defender.condition;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.Iterator;");
    _builder.newLine();
    _builder.append("import java.util.Map;");
    _builder.newLine();
    _builder.append("import java.util.regex.Matcher;");
    _builder.newLine();
    _builder.append("import java.util.regex.Pattern;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import jzombies.Request;");
    _builder.newLine();
    _builder.append("import jzombies.util.HttpDataParser;");
    _builder.newLine();
    _builder.append("import jzombies.util.HttpDataParser.HttpData;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This class will check if the parameters of http request match to ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* a certain regular expression or not.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @author User-Zero");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class HttpRegExpMatchCheck extends SubCondition {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String regExp;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public HttpRegExpMatchCheck(String regExp) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated constructor stub");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.regExp = regExp;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean check(Request r) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Create a Pattern object");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("Pattern patt = Pattern.compile(regExp);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("// Now create matcher object.");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("Matcher m ;");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("HttpDataParser d = new HttpDataParser();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HttpData dd = d.parse(r.getData());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("Iterator it = dd.getParam().entrySet().iterator();");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("while (it.hasNext()) {");
    _builder.newLine();
    _builder.append("\t\t     ");
    _builder.append("Map.Entry pair = (Map.Entry)it.next();");
    _builder.newLine();
    _builder.append("\t\t     ");
    _builder.append("m = patt.matcher(pair.getValue().toString());");
    _builder.newLine();
    _builder.append("\t\t     ");
    _builder.newLine();
    _builder.append("\t\t     ");
    _builder.append("if(m.find())");
    _builder.newLine();
    _builder.append("\t\t    \t ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t\t     ");
    _builder.append("it.remove();");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_ProtocolCheck(final Agent e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package jzombies.defender.condition;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import jzombies.Protocol;");
    _builder.newLine();
    _builder.append("import jzombies.Request;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*This class will check if a request uses certain protocol.  ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @author User-Zero");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class ProtocolCheck extends SubCondition {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Protocol protocol;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ProtocolCheck(Protocol protocol) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.protocol = protocol;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean check(Request r) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(protocol.getStatusCode() == r.getProtocol().getStatusCode()){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_SubCondition(final Agent e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t\t");
    _builder.append("package jzombies.defender.condition;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("import jzombies.Request;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public abstract class SubCondition {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append("* This function will verify if a request meet certain condition  ");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append("* @param r The request");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append("* @return result of the condition");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("public abstract boolean check(Request r) ;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_DefenderParser(final Agent e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package jzombies.util;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.xml.parsers.DocumentBuilder;");
    _builder.newLine();
    _builder.append("import javax.xml.parsers.DocumentBuilderFactory;");
    _builder.newLine();
    _builder.append("import javax.xml.parsers.ParserConfigurationException;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import jzombies.Defender;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.w3c.dom.Document;");
    _builder.newLine();
    _builder.append("import org.w3c.dom.Element;");
    _builder.newLine();
    _builder.append("import org.w3c.dom.Node;");
    _builder.newLine();
    _builder.append("import org.w3c.dom.NodeList;");
    _builder.newLine();
    _builder.append("import org.xml.sax.SAXException;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import repast.simphony.space.continuous.ContinuousSpace;");
    _builder.newLine();
    _builder.append("import repast.simphony.space.grid.Grid;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This class will parse the defender.xml file,");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* to find the defender");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class DefenderParser{");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This method will parse the defender.xml file,");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* look for the defender");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param space ContinuousSpace");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param grid Grid");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return an instance of Defender agent");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Defender parseDefender(ContinuousSpace<Object> space, Grid<Object> grid) throws ParserConfigurationException, SAXException, IOException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("DocumentBuilder db = dbf.newDocumentBuilder();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Document dom2 = db.parse(\"src/s1_defender.xml\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("dom2.getDocumentElement().normalize();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Element docEle2 = dom2.getDocumentElement();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Defender defender= null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("NodeList nl = docEle2.getChildNodes();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String sourceIP = null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(nl!=null && nl.getLength()>0){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (int i = 0; i < nl.getLength(); i++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(nl.item(i).getNodeType() == Node.ELEMENT_NODE){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("Element el=(Element) nl.item(i);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("sourceIP= el.getAttribute(\"sourceIP\").toString();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("defender= new Defender(space, grid, sourceIP);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("defender.setSecurityPolicyList(SecurityPolicyListParser.getSecurityPolicyList());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return defender;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_HttpDataParser(final Agent e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package jzombies.util;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import jzombies.HttpMethod;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/***");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This class parse the data portion of the request");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* to extract the HTTP headers, and body values");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class HttpDataParser {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/***");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This method will parse the data portion");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* of incoming HTTP request.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param data ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return HttpData");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public HttpData parse(String data){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HttpData hd = new HttpData();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(data.length() == 0){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String[] lines = data.split(\"\\n\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (String line : lines) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("line = line.replace(\"\\t\", \"\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(line.toLowerCase().startsWith(\"get\")){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("hd.setMethod(HttpMethod.GET);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("line = line.replace(\"GET \", \"\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("line = line.substring(line.indexOf(\"?\") + 1 , line.indexOf(\"HTTP/\"));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("hd.setParam(getParam(line));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}else if(line.toLowerCase().startsWith(\"post\")){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("hd.setMethod(HttpMethod.POST);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("String str = lines[lines.length - 1].replace(\"\\t\", \"\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("hd.setParam(getParam(str));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return hd;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/***");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This method will return all the parameters");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* from the body portion in HTTP requests.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param par is String");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return HashMap ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public HashMap<String, String> getParam(String par){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HashMap<String, String> params = new HashMap<String, String>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String[] lines = par.split(\"&\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (String line : lines) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String[] parts = line.split(\"=\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(parts.length == 2 )");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("params.put(parts[0], parts[1]);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("else if(parts.length > 2  ){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String temp = \"\";");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("for (int i = 1; i < parts.length; i++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if(i+1 < parts.length){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("temp += parts[i] + \"=\";");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("temp += parts[i];");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("params.put(parts[0],temp);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return params;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/***");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This class contains HTTP header\'s information");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* and the body. ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public class HttpData{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HttpMethod method;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HashMap<String, String> param;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String host;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String agent;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public HttpMethod getMethod() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return method;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public void setMethod(HttpMethod method) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.method = method;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public HashMap<String, String> getParam() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return param;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public void setParam(HashMap<String, String> param) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.param = param;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public String getHost() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return host;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public void setHost(String host) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.host = host;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public String getAgent() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return agent;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public void setAgent(String agent) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.agent = agent;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_SecurityPolicyListParser(final Agent e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package jzombies.util;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.append("import java.util.Iterator;");
    _builder.newLine();
    _builder.append("import java.util.Map;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.xml.parsers.DocumentBuilder;");
    _builder.newLine();
    _builder.append("import javax.xml.parsers.DocumentBuilderFactory;");
    _builder.newLine();
    _builder.append("import javax.xml.parsers.ParserConfigurationException;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import jzombies.HttpMethod;");
    _builder.newLine();
    _builder.append("import jzombies.Protocol;");
    _builder.newLine();
    _builder.append("import jzombies.defender.Condition;");
    _builder.newLine();
    _builder.append("import jzombies.defender.EndPoint;");
    _builder.newLine();
    _builder.append("import jzombies.defender.SecurityPolicy;");
    _builder.newLine();
    _builder.append("import jzombies.defender.SecurityPolicyList;");
    _builder.newLine();
    _builder.append("import jzombies.defender.action.Action;");
    _builder.newLine();
    _builder.append("import jzombies.defender.action.BlockSender;");
    _builder.newLine();
    _builder.append("import jzombies.defender.action.DropRequest;");
    _builder.newLine();
    _builder.append("import jzombies.defender.action.PassRequst;");
    _builder.newLine();
    _builder.append("import jzombies.defender.condition.FrequencyCheck;");
    _builder.newLine();
    _builder.append("import jzombies.defender.condition.HttpMethodCheck;");
    _builder.newLine();
    _builder.append("import jzombies.defender.condition.HttpParamLengthCheck;");
    _builder.newLine();
    _builder.append("import jzombies.defender.condition.HttpParamLengthCheck.OpCode;");
    _builder.newLine();
    _builder.append("import jzombies.defender.condition.HttpRegExpMatchCheck;");
    _builder.newLine();
    _builder.append("import jzombies.defender.condition.ProtocolCheck;");
    _builder.newLine();
    _builder.append("import jzombies.defender.condition.SubCondition;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.w3c.dom.Document;");
    _builder.newLine();
    _builder.append("import org.w3c.dom.Element;");
    _builder.newLine();
    _builder.append("import org.w3c.dom.NodeList;");
    _builder.newLine();
    _builder.append("import org.xml.sax.SAXException;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This class will parse the defender.xml file,");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* and find the security policies ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class SecurityPolicyListParser {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This method will find the SecurityPolicies within the defender.xml file,");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return an instance of SecurityPolicy");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public static SecurityPolicyList getSecurityPolicyList() throws ParserConfigurationException, SAXException, IOException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("SecurityPolicyList spList= new SecurityPolicyList();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SecurityPolicy sp=null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("DocumentBuilder db = dbf.newDocumentBuilder();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Document dom2 = db.parse(\"src/s1_defender.xml\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("dom2.getDocumentElement().normalize();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Element docEle2 = dom2.getDocumentElement();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("NodeList nl2 = docEle2.getElementsByTagName(\"securityPolicyList\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("EndPoint ep = null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ArrayList<Action> tc = new ArrayList<Action>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ArrayList<Action> fc = new ArrayList<Action>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ArrayList<Condition> conditions= new ArrayList<Condition>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ArrayList<String> op=new ArrayList<String>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int i = 0; i < nl2.getLength(); i++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(nl2.item(i) instanceof Element){");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("NodeList children = ((Element) nl2.item(i)).getElementsByTagName(\"securityPolicy\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("for (int j = 0; j < children.getLength(); j++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if(children.item(j) instanceof Element){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("ep= getEndPoint(children, j);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("tc=getTrueActionPortion(children, j);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("fc=getFalseActionPortion(children, j);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("sp = new SecurityPolicy(ep,tc,fc);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("conditions=getPolicies(docEle2, children, j);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("for (Condition condition : conditions) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("sp.addCondition(condition);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("op=getOperators(children, j);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("sp.setOperationList(op);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("spList.addSecurityPolicy(sp);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return spList;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This method will find the port and protocol for the security policy,");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param children NodeList ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param j index");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return an instance of Endpoint");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static EndPoint getEndPoint(NodeList children, int j) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("EndPoint ep = new EndPoint();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("NodeList endPointChildren= ((Element)children.item(j)).getElementsByTagName(\"endpoint\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HashMap<String, Integer> hmap= new HashMap<String,Integer>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Protocol protocol = null; ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Integer port = 0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int k = 0; k < endPointChildren.getLength(); k++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (endPointChildren.item(k) instanceof Element) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Element e= (Element) endPointChildren.item(k);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String value=e.getElementsByTagName(\"protocol\").item(k).getTextContent().toUpperCase();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("protocol = getProtocol(value);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("port= Integer.parseInt(e.getElementsByTagName(\"port\").item(k).getTextContent());");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("hmap.put(\"protocol\", protocol.getStatusCode());");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("hmap.put(\"port\", Integer.parseInt(e.getElementsByTagName(\"port\").item(k).getTextContent()));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}       ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ep.setProtocol(protocol);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ep.setPort(port);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return ep;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This method will find the allowed behaviors for the policies,");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param children NodeList ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param j index");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return an array list of Action");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static ArrayList<Action> getTrueActionPortion(NodeList children, int j) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ArrayList<Action> tc= new ArrayList<Action>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("NodeList trueActionChildren= ((Element)children.item(j)).getElementsByTagName(\"trueAction\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int k = 0; k < trueActionChildren.getLength(); k++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (trueActionChildren.item(k) instanceof Element) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Element actionElement= (Element)trueActionChildren.item(k);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("for (int l = 0; l < actionElement.getElementsByTagName(\"action\").getLength(); l++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("String actionName=actionElement.getElementsByTagName(\"action\").item(l).getAttributes().getNamedItem(\"type\").getNodeValue();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if(actionName.equalsIgnoreCase(\"pass\")){ ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("tc.add(new PassRequst());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("else if(actionName.equalsIgnoreCase(\"drop\")){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("tc.add(new DropRequest());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("tc.add(new BlockSender());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return tc;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This method will find the disallowed behaviors for the policies,");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param children NodeList ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param j index");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return an array list of Action");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static ArrayList<Action> getFalseActionPortion(NodeList children, int j) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ArrayList<Action> fc= new ArrayList<Action>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("NodeList falseActionChildren= ((Element)children.item(j)).getElementsByTagName(\"falseAction\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int k = 0; k < falseActionChildren.getLength(); k++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (falseActionChildren.item(k) instanceof Element) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Element falseAction= (Element)falseActionChildren.item(k);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("for (int l = 0; l < falseAction.getElementsByTagName(\"action\").getLength(); l++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("String actionName=falseAction.getElementsByTagName(\"action\").item(l).getAttributes().getNamedItem(\"type\").getNodeValue();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if(actionName.equalsIgnoreCase(\"pass\")){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("fc.add(new PassRequst());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("else if(actionName.equalsIgnoreCase(\"drop\")){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("fc.add(new DropRequest());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("fc.add(new BlockSender());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return fc;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This method will find the security policies within the defender.xml,");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param docEle2 SecurityPolicyList element under the defender node");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param children NodeList ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param j index");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return a hash map of conditions for each security policy");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static ArrayList<Condition> getPolicies(Element docEle2, NodeList children, int j) {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ArrayList<Condition> conditionsList= new ArrayList<Condition>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HashMap<String, Condition> conditionHashMap = getConditions(children, j);\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HashMap<String, ArrayList<SubCondition>> subConditionHashMap=getSubConditions(docEle2);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Iterator iter = conditionHashMap.entrySet().iterator();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("while (iter.hasNext()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("Map.Entry mEntry = (Map.Entry) iter.next();//conditions");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("Iterator iter2 = subConditionHashMap.entrySet().iterator();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("while (iter2.hasNext()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Map.Entry mEntry2 = (Map.Entry) iter2.next();//subconditions");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if(mEntry.getKey().toString().equals(mEntry2.getKey().toString())){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("for (SubCondition sub: (ArrayList<SubCondition>)mEntry2.getValue() ){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("((Condition)mEntry.getValue()).addSubCondition(sub);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("//conditionsList.add(((Condition)mEntry.getValue()));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("conditionsList.add(((Condition)mEntry.getValue()));");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return conditionsList;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This method will find the conditions for each security policy ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* within the defender.xml,");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param children NodeList ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param j index");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return a hash map of conditions for each security policy");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static HashMap<String, Condition> getConditions(NodeList children,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int j) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HashMap<String, Condition> conditionHashMap= new HashMap<String, Condition>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("NodeList policy= ((Element)children.item(j)).getElementsByTagName(\"policy\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int k = 0; k < policy.getLength(); k++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (policy.item(k) instanceof Element) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Element cond= (Element)policy.item(k);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String policyName;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("//System.out.println(cond.getElementsByTagName(\"condition\").getLength());");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("for (int l = 0; l < cond.getElementsByTagName(\"condition\").getLength(); l++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("policyName=cond.getElementsByTagName(\"condition\").item(l).getAttributes().getNamedItem(\"name\").getNodeValue();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("Condition c1= new Condition();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("conditionHashMap.put(policyName, c1);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return conditionHashMap;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This method will find the subconditions within the defender.xml,");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param docEle2 SecurityPolicyList element under the defender node");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return a hash map of subconditions list for each condition");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static HashMap<String, ArrayList<SubCondition> > getSubConditions(Element docEle2) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HashMap<String, ArrayList<SubCondition> > subconditionHashMap= new HashMap<String, ArrayList<SubCondition> >();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("NodeList conditionListNodes = docEle2.getElementsByTagName(\"conditionList\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int m = 0; m < conditionListNodes.getLength(); m++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(conditionListNodes.item(m) instanceof Element){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("NodeList conditions = ((Element)conditionListNodes.item(m)).getElementsByTagName(\"condition\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("for (int i = 0; i < conditions.getLength(); i++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if(conditions.item(i) instanceof Element){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("String conditionName= conditions.item(i).getAttributes().getNamedItem(\"name\").getNodeValue();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("NodeList subConditions= ((Element) conditions.item(i)).getElementsByTagName(\"subcondition\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("for (int k = 0; k < subConditions.getLength(); k++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("if(subConditions.item(k) instanceof Element){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("String subConditionsName= subConditions.item(k).getAttributes().getNamedItem(\"name\").getNodeValue();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("String subConditionsValue= subConditions.item(k).getTextContent().toString().trim();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("//System.out.println(\"conditionName:\" +conditionName +\"--> \" +\"subConditionsName: \" + subConditionsName +\"subConditionsValue: \"  + subConditionsValue);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("if(subConditionsName.equals(\"isRequestProtocolEqualsTo\")){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("if(subconditionHashMap.containsKey(conditionName)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("subconditionHashMap.get(conditionName).add(new ProtocolCheck(getProtocol(subConditionsValue)));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("ArrayList<SubCondition> templist = new ArrayList<SubCondition>();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("subconditionHashMap.put(conditionName, templist);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("templist.add(new ProtocolCheck(getProtocol(subConditionsValue)));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("else if(subConditionsName.equals(\"isHTTPMethodEqualsTo\")){\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("//subconditionHashMap.put(conditionName, new HttpMethodCheck(getHTTPMethod(subConditionsValue)));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("if(subconditionHashMap.containsKey(conditionName)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("subconditionHashMap.get(conditionName).add(new HttpMethodCheck(getHTTPMethod(subConditionsValue)));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("ArrayList<SubCondition> templist = new ArrayList<SubCondition>();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("subconditionHashMap.put(conditionName, templist);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("templist.add(new HttpMethodCheck(getHTTPMethod(subConditionsValue)));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("else if(subConditionsName.equals(\"isParaContentMatchRegExp\")){\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("//subconditionHashMap.put(conditionName, new HttpMethodCheck(getHTTPMethod(subConditionsValue)));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("if(subconditionHashMap.containsKey(conditionName)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("subconditionHashMap.get(conditionName).add(new HttpRegExpMatchCheck(subConditionsValue));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("ArrayList<SubCondition> templist = new ArrayList<SubCondition>();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("subconditionHashMap.put(conditionName, templist);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("templist.add(new HttpRegExpMatchCheck(subConditionsValue));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("else if(subConditionsName.equals(\"isRequestFrequencyLessThan\")){\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("//subconditionHashMap.put(conditionName, new HttpMethodCheck(getHTTPMethod(subConditionsValue)));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("if(subconditionHashMap.containsKey(conditionName)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("subconditionHashMap.get(conditionName).add(new FrequencyCheck(Integer.parseInt(subConditionsValue)));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("ArrayList<SubCondition> templist = new ArrayList<SubCondition>();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("subconditionHashMap.put(conditionName, templist);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("templist.add(new FrequencyCheck(Integer.parseInt(subConditionsValue)));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("}\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("else if(subConditionsName.equals(\"isParaLenghtLessThan\")){\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("//subconditionHashMap.put(conditionName, new HttpMethodCheck(getHTTPMethod(subConditionsValue)));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("if(subconditionHashMap.containsKey(conditionName)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("subconditionHashMap.get(conditionName).add(new HttpParamLengthCheck(OpCode.LessThan, Integer.parseInt(subConditionsValue)));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("ArrayList<SubCondition> templist = new ArrayList<SubCondition>();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("subconditionHashMap.put(conditionName, templist);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("templist.add(new HttpParamLengthCheck(OpCode.LessThan, Integer.parseInt(subConditionsValue)));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("}\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("else if(subConditionsName.equals(\"isParaLenghtGreaterThan\")){\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("//subconditionHashMap.put(conditionName, new HttpMethodCheck(getHTTPMethod(subConditionsValue)));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("if(subconditionHashMap.containsKey(conditionName)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("subconditionHashMap.get(conditionName).add(new HttpParamLengthCheck(OpCode.GreaterThan, Integer.parseInt(subConditionsValue)));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("ArrayList<SubCondition> templist = new ArrayList<SubCondition>();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("subconditionHashMap.put(conditionName, templist);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("templist.add(new HttpParamLengthCheck(OpCode.GreaterThan, Integer.parseInt(subConditionsValue)));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("}\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("else if(subConditionsName.equals(\"isParaLenghtEqualsTo\")){\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("//subconditionHashMap.put(conditionName, new HttpMethodCheck(getHTTPMethod(subConditionsValue)));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("if(subconditionHashMap.containsKey(conditionName)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("subconditionHashMap.get(conditionName).add(new HttpParamLengthCheck(OpCode.EqualsTo, Integer.parseInt(subConditionsValue)));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("ArrayList<SubCondition> templist = new ArrayList<SubCondition>();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("subconditionHashMap.put(conditionName, templist);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("templist.add(new HttpParamLengthCheck(OpCode.EqualsTo, Integer.parseInt(subConditionsValue)));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("}\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}\t\t\t\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return subconditionHashMap;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This method will find the operators for the conditions,");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param children NodeList ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param j index");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return the string[operators] of arraylist");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static ArrayList<String> getOperators(NodeList children, int j) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ArrayList<String> operatorList= new ArrayList<String>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("NodeList operatorListChildren= ((Element)children.item(j)).getElementsByTagName(\"operationList\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int k = 0; k < operatorListChildren.getLength(); k++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (operatorListChildren.item(k) instanceof Element) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Element actionElement= (Element)operatorListChildren.item(k);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("for (int l = 0; l < actionElement.getElementsByTagName(\"operator\").getLength(); l++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("operatorList.add(actionElement.getElementsByTagName(\"operator\").item(l).getTextContent());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return operatorList;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This method will find the protocol,");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param value the string value found within the xml file");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return the matched protocol [HTTP(80) HTTPS(443) FTP(21) SSH(22)]");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static Protocol getProtocol(String value) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Protocol pro = null;\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (Protocol b : Protocol.values()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (value.equals((b.toString().toUpperCase()))) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("pro= b;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return pro;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This method will find the http method,");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param value the string value found within the xml file");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return the matched http method; [GET,POST,HEAD,DELETE,PUT]");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static HttpMethod getHTTPMethod(String value) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HttpMethod method = null;\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (HttpMethod m : HttpMethod.values()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (value.toUpperCase().equals((m.toString().toUpperCase()))) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("method= m;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return method;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_UserAndAttackerParser(final Agent e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package jzombies.util;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.xml.parsers.DocumentBuilder;");
    _builder.newLine();
    _builder.append("import javax.xml.parsers.DocumentBuilderFactory;");
    _builder.newLine();
    _builder.append("import javax.xml.parsers.ParserConfigurationException;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.w3c.dom.Document;");
    _builder.newLine();
    _builder.append("import org.w3c.dom.Element;");
    _builder.newLine();
    _builder.append("import org.w3c.dom.Node;");
    _builder.newLine();
    _builder.append("import org.w3c.dom.NodeList;");
    _builder.newLine();
    _builder.append("import org.xml.sax.SAXException;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import jzombies.Agent;");
    _builder.newLine();
    _builder.append("import jzombies.Attacker;");
    _builder.newLine();
    _builder.append("import jzombies.Protocol;");
    _builder.newLine();
    _builder.append("import jzombies.Request;");
    _builder.newLine();
    _builder.append("import jzombies.User;");
    _builder.newLine();
    _builder.append("import repast.simphony.space.continuous.ContinuousSpace;");
    _builder.newLine();
    _builder.append("import repast.simphony.space.grid.Grid;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This class will parse the Users.xml file,");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* to find the user and attacker");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class UserAndAttackerParser{");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This method will parse the Users.xml file,");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* look for the defender");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param space ContinuousSpace");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param grid Grid");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return an ArrayList of agents that include instance");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* of User and Attacker");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ArrayList<Agent> parseUsers(ContinuousSpace<Object> space,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Grid<Object> grid)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("throws ParserConfigurationException, SAXException, IOException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ArrayList<Agent> agentsList = new ArrayList<Agent>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("DocumentBuilder db = dbf.newDocumentBuilder();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Document dom = db.parse(\"src/s1_Users.xml\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("dom.getDocumentElement().normalize();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Element docEle = dom.getDocumentElement();");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("NodeList nl = docEle.getChildNodes();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("boolean isUser = false;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(nl!=null && nl.getLength()>0){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (int i = 0; i < nl.getLength(); i++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(nl.item(i).getNodeType() == Node.ELEMENT_NODE){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("Element el=(Element) nl.item(i);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if(el.getNodeName().toUpperCase().contains(\"USER\")){");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("isUser = el.getAttribute(\"type\").toUpperCase().contains(\"USER\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("ArrayList<Request> rl = new ArrayList<Request>();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("for (int j = 0; j < el.getElementsByTagName(\"request\").getLength(); j++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("String protocol=el.getElementsByTagName(\"protocol\").item(j).getTextContent().toUpperCase();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("Protocol pro = getProtocol(protocol);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("rl.add(new Request(el.getElementsByTagName(\"source\").item(j).getTextContent().replace(\"\\t\", \"\"), el.getElementsByTagName(\"destination\").item(j).getTextContent().replace(\"\\t\", \"\"), Integer.parseInt(el.getElementsByTagName(\"port\").item(j).getTextContent()), el.getElementsByTagName(\"data\").item(j).getTextContent().replace(\"\\t\", \"\"), pro));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if(isUser){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("User u = new User(space,grid,el.getAttribute(\"sourceIP\"));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("for (Request request : rl) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("u.addRequest(request);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("agentsList.add(u);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("else{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("Attacker u = new Attacker(space,grid,el.getAttribute(\"sourceIP\"));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("for (Request request : rl) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("u.addRequest(request);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("//u.print();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("agentsList.add(u);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return agentsList;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This method will find the protocol,");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param value the string value found within the xml file");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return the matched protocol");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static Protocol getProtocol(String value) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Protocol pro = null;\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (Protocol b : Protocol.values()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (value.equals((b.toString().toUpperCase()))) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("pro= b;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return pro;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
